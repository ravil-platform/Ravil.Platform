// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Persistence.Context;

namespace Persistence.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20231102101804_mig-AddRedirectionUrlModel")]
    partial class migAddRedirectionUrlModel
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasDefaultSchema("dbo")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("ProductVersion", "5.0.13")
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens");
                });

            modelBuilder.Entity("Ravil.Domain.Models.Data.Account", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("AccountCategoryId")
                        .HasColumnType("int");

                    b.Property<int?>("AccountLevelId")
                        .HasColumnType("int");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("Discount")
                        .HasColumnType("int");

                    b.Property<double>("DiscountedPrice")
                        .HasColumnType("float");

                    b.Property<DateTime>("ExpireDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("ExpireDay")
                        .HasColumnType("int");

                    b.Property<string>("IconPicture")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<bool>("IsRecommended")
                        .HasColumnType("bit");

                    b.Property<DateTime>("LastDeleteBicycleDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("LastDeletePermanentDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("LastUpdateDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Picture")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<double>("Price")
                        .HasColumnType("float");

                    b.Property<int>("SalesCount")
                        .HasColumnType("int");

                    b.Property<bool>("Status")
                        .HasColumnType("bit");

                    b.Property<string>("Subtitle")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("AccountCategoryId");

                    b.HasIndex("AccountLevelId");

                    b.ToTable("Account");
                });

            modelBuilder.Entity("Ravil.Domain.Models.Data.AccountAttr", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("AccountId")
                        .HasColumnType("int");

                    b.Property<int>("AttrId")
                        .HasColumnType("int");

                    b.Property<int>("ValueId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("AccountId");

                    b.HasIndex("AttrId");

                    b.HasIndex("ValueId");

                    b.ToTable("AccountAttr");
                });

            modelBuilder.Entity("Ravil.Domain.Models.Data.AccountCategory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("IconPicture")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<short>("Sort")
                        .HasColumnType("smallint");

                    b.Property<bool>("Status")
                        .HasColumnType("bit");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.ToTable("AccountCategory");
                });

            modelBuilder.Entity("Ravil.Domain.Models.Data.AccountLevel", b =>
                {
                    b.Property<int>("AccountLevelId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("LevelStyle")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("LevelTitle")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.HasKey("AccountLevelId");

                    b.ToTable("AccountLevel");
                });

            modelBuilder.Entity("Ravil.Domain.Models.Data.Address", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("CityId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("JobBranchId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LocationId")
                        .IsRequired()
                        .HasMaxLength(450)
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("OtherAddress")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PostalAddress")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PostalCode")
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<int>("StateId")
                        .HasColumnType("int");

                    b.Property<DateTime>("UpdateDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("CityId");

                    b.HasIndex("JobBranchId")
                        .IsUnique();

                    b.HasIndex("LocationId")
                        .IsUnique();

                    b.HasIndex("StateId");

                    b.ToTable("Address");
                });

            modelBuilder.Entity("Ravil.Domain.Models.Data.AdminTheme", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Theme")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasMaxLength(450)
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.ToTable("AdminTheme");
                });

            modelBuilder.Entity("Ravil.Domain.Models.Data.AnswerComment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("AdminId")
                        .HasMaxLength(450)
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("AnswerCommentDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("AnswerCommentText")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("AnswerCommentTitle")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("Avatar")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int>("CommentId")
                        .HasColumnType("int");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FullName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("IsAdminAnswer")
                        .HasColumnType("bit");

                    b.Property<bool>("IsConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("Phone")
                        .HasMaxLength(11)
                        .HasColumnType("nvarchar(11)");

                    b.Property<DateTime?>("ReviewDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasMaxLength(450)
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("UserIp")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("CommentId");

                    b.ToTable("AnswerComment");
                });

            modelBuilder.Entity("Ravil.Domain.Models.Data.ApplicationUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("Address")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("Avatar")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("BirthDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("BlockedDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("CityBaseId")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("ConfirmationDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .HasMaxLength(512)
                        .HasColumnType("nvarchar(512)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<int>("ExpireTimeSpanBlock")
                        .HasColumnType("int");

                    b.Property<string>("Firstname")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<int>("Gender")
                        .HasColumnType("int");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<DateTime>("LastDeleteBicycleDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("LastUpdateDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("LastUpdateDateReason")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("Lastname")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("LockoutReason")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NationalCode")
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(512)
                        .HasColumnType("nvarchar(512)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(512)
                        .HasColumnType("nvarchar(512)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Phone")
                        .HasMaxLength(11)
                        .HasColumnType("nvarchar(11)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<DateTime>("RegisterDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("StateBaseId")
                        .HasColumnType("int");

                    b.Property<int?>("StateId")
                        .HasColumnType("int");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<bool>("UserIsBlocked")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(512)
                        .HasColumnType("nvarchar(512)");

                    b.Property<int>("UserNameType")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CityBaseId");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.HasIndex("StateBaseId");

                    b.HasIndex("StateId");

                    b.ToTable("AspNetUsers");
                });

            modelBuilder.Entity("Ravil.Domain.Models.Data.Attr", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("AttrCategoryId")
                        .HasColumnType("int");

                    b.Property<int>("AttrType")
                        .HasColumnType("int");

                    b.Property<int>("CategoryId")
                        .HasColumnType("int");

                    b.Property<bool>("Filter")
                        .HasColumnType("bit");

                    b.Property<string>("IconHtmlCode")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("IconPicture")
                        .HasMaxLength(60)
                        .HasColumnType("nvarchar(60)");

                    b.Property<bool>("ShowInPage")
                        .HasColumnType("bit");

                    b.Property<short>("Sort")
                        .HasColumnType("smallint");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("AttrCategoryId");

                    b.HasIndex("CategoryId");

                    b.ToTable("Attr");
                });

            modelBuilder.Entity("Ravil.Domain.Models.Data.AttrAccount", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("AttrCategoryId")
                        .HasColumnType("int");

                    b.Property<int>("AttrType")
                        .HasColumnType("int");

                    b.Property<string>("IconHtmlCode")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("IconPicture")
                        .HasMaxLength(60)
                        .HasColumnType("nvarchar(60)");

                    b.Property<short>("Sort")
                        .HasColumnType("smallint");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("AttrCategoryId");

                    b.ToTable("AttrAccount");
                });

            modelBuilder.Entity("Ravil.Domain.Models.Data.AttrAccountValue", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("AttrAccountId")
                        .HasColumnType("int");

                    b.Property<int>("Sort")
                        .HasColumnType("int");

                    b.Property<string>("Value")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("AttrAccountId");

                    b.ToTable("AttrAccountValue");
                });

            modelBuilder.Entity("Ravil.Domain.Models.Data.AttrCategory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("IconPicture")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<short>("Sort")
                        .HasColumnType("smallint");

                    b.Property<bool>("Status")
                        .HasColumnType("bit");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.ToTable("AttrCategory");
                });

            modelBuilder.Entity("Ravil.Domain.Models.Data.AttrValue", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("AttrId")
                        .HasColumnType("int");

                    b.Property<int>("Sort")
                        .HasColumnType("int");

                    b.Property<string>("Value")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("AttrId");

                    b.ToTable("AttrValue");
                });

            modelBuilder.Entity("Ravil.Domain.Models.Data.Banner", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("BannerPictureType")
                        .HasColumnType("int");

                    b.Property<int>("BannerType")
                        .HasColumnType("int");

                    b.Property<int>("ClickCount")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(512)
                        .HasColumnType("nvarchar(512)");

                    b.Property<DateTime?>("ExpireDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("ExpireDay")
                        .HasColumnType("int");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("JobBranchId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LargePicture")
                        .HasMaxLength(70)
                        .HasColumnType("nvarchar(70)");

                    b.Property<DateTime>("LastDeleteBicycleDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("LastDeletePermanentDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("LastUpdateDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("LinkPage")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SmallPicture")
                        .HasMaxLength(70)
                        .HasColumnType("nvarchar(70)");

                    b.Property<byte>("Sort")
                        .HasColumnType("tinyint");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<int>("ViewCount")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("JobBranchId");

                    b.ToTable("Banner");
                });

            modelBuilder.Entity("Ravil.Domain.Models.Data.Blog", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ApplicationUserId")
                        .IsRequired()
                        .HasMaxLength(450)
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("AuthorName")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("CanonicalMeta")
                        .HasColumnType("bit");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IndexMeta")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<bool>("IsResizePicture")
                        .HasColumnType("bit");

                    b.Property<string>("LargePicture")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime>("LastDeleteBicycleDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("LastDeletePermanentDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("LastUpdateDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("MetaCanonicalUrl")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("MetaDesc")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("MetaTitle")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<short>("ReadingTime")
                        .HasColumnType("smallint");

                    b.Property<string>("Route")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("SmallPicture")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("SubTitle")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("Summary")
                        .IsRequired()
                        .HasMaxLength(512)
                        .HasColumnType("nvarchar(512)");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("TitleListContent")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ViewCount")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("Blog");
                });

            modelBuilder.Entity("Ravil.Domain.Models.Data.BlogCategory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("ParentId")
                        .HasColumnType("int");

                    b.Property<byte>("Sort")
                        .HasColumnType("tinyint");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.HasKey("Id");

                    b.ToTable("BlogCategory");
                });

            modelBuilder.Entity("Ravil.Domain.Models.Data.BlogCategoryRel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("BlogCategoryId")
                        .HasColumnType("int");

                    b.Property<int>("BlogId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("BlogCategoryId");

                    b.HasIndex("BlogId");

                    b.ToTable("BlogCategoryRel");
                });

            modelBuilder.Entity("Ravil.Domain.Models.Data.BlogTag", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("BlogId")
                        .HasColumnType("int");

                    b.Property<int>("TagId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("BlogId");

                    b.HasIndex("TagId");

                    b.ToTable("BlogTag");
                });

            modelBuilder.Entity("Ravil.Domain.Models.Data.Brand", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("AlternateTitle")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("Introduction")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Picture")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("SearchLink")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("Status")
                        .HasColumnType("bit");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.ToTable("Brand");
                });

            modelBuilder.Entity("Ravil.Domain.Models.Data.Category", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("CanonicalMeta")
                        .HasColumnType("bit");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("HasAttribute")
                        .HasColumnType("bit");

                    b.Property<string>("IconPicture")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<bool>("IndexMeta")
                        .HasColumnType("bit");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<bool>("IsLastNode")
                        .HasColumnType("bit");

                    b.Property<bool>("IsResizePicture")
                        .HasColumnType("bit");

                    b.Property<DateTime>("LastDeleteBicycleDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("LastDeletePermanentDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("LastUpdateDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("MetaCanonicalUrl")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("MetaDesc")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("MetaTitle")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<short>("NodeLevel")
                        .HasColumnType("smallint");

                    b.Property<string>("PageContent")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ParentId")
                        .HasColumnType("int");

                    b.Property<string>("Picture")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Route")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<int>("Sort")
                        .HasColumnType("int");

                    b.Property<int>("ViewCount")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("Category");
                });

            modelBuilder.Entity("Ravil.Domain.Models.Data.CategoryService", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("CategoryId")
                        .HasColumnType("int");

                    b.Property<int>("ServiceId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CategoryId");

                    b.HasIndex("ServiceId");

                    b.ToTable("CategoryService");
                });

            modelBuilder.Entity("Ravil.Domain.Models.Data.City", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("CanonicalMeta")
                        .HasColumnType("bit");

                    b.Property<int>("CityBaseId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IndexMeta")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<bool>("IsResizePicture")
                        .HasColumnType("bit");

                    b.Property<DateTime>("LastDeleteBicycleDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("LastDeletePermanentDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("LastUpdateDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("MetaCanonicalUrl")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("MetaDesc")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("MetaTitle")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("Picture")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("Route")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("Status")
                        .HasColumnType("bit");

                    b.Property<string>("Subtitle")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("CityBaseId")
                        .IsUnique();

                    b.ToTable("City");
                });

            modelBuilder.Entity("Ravil.Domain.Models.Data.CityBase", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("CountyId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int?>("StateBaseId")
                        .HasColumnType("int");

                    b.Property<int>("StateId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("StateBaseId");

                    b.ToTable("CityBase");
                });

            modelBuilder.Entity("Ravil.Domain.Models.Data.CityCategory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("CategoryId")
                        .HasColumnType("int");

                    b.Property<int>("CityId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CategoryId");

                    b.HasIndex("CityId");

                    b.ToTable("CityCategory");
                });

            modelBuilder.Entity("Ravil.Domain.Models.Data.Comment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Avatar")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int?>("BlogId")
                        .HasColumnType("int");

                    b.Property<string>("CommentText")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("CommentTitle")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<int>("CommentType")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FullName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("IsConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("JobBranchId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("LastDeleteBicycleDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("LastDeletePermanentDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("LastUpdateDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Phone")
                        .IsRequired()
                        .HasMaxLength(11)
                        .HasColumnType("nvarchar(11)");

                    b.Property<string>("UserId")
                        .HasMaxLength(450)
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("UserIp")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("BlogId");

                    b.HasIndex("JobBranchId");

                    b.HasIndex("UserId");

                    b.ToTable("Comment");
                });

            modelBuilder.Entity("Ravil.Domain.Models.Data.Complaint", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ComplaintText")
                        .IsRequired()
                        .HasMaxLength(1024)
                        .HasColumnType("nvarchar(1024)");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("FullName")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("IsReadByAdmin")
                        .HasColumnType("bit");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasMaxLength(11)
                        .HasColumnType("nvarchar(11)");

                    b.Property<string>("Subject")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.ToTable("Complaint");
                });

            modelBuilder.Entity("Ravil.Domain.Models.Data.Config", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("AboutUsContent")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("AboutUsMetaDesc")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("AboutUsTitle")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("AboutUsVideo")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<int?>("ActiveBaseCityId")
                        .HasColumnType("int");

                    b.Property<string>("Address")
                        .HasMaxLength(512)
                        .HasColumnType("nvarchar(512)");

                    b.Property<string>("BlogMetaDesc")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("BlogTitle")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("CommentRules")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ConfirmationPatternCode")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("ContactContent")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ContactMetaDesc")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("ContactTitle")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("ContentDeliveryNetwork")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("CurrenciesAccepted")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int?>("DefaultFaqCategory")
                        .HasColumnType("int");

                    b.Property<string>("Domain")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Email")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<int>("ExternalLoginState")
                        .HasColumnType("int");

                    b.Property<string>("Facebook")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("FaqContent")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FaqMetaDesc")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("FaqPicture")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("FaqTitle")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("FooterText")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("FoundingDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("FreeAddContent")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FreeAddIconPicture")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("FreeAddMetaDesc")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("FreeAddPicture")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("FreeAddTitle")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<double>("FreeShippingLimit")
                        .HasColumnType("float");

                    b.Property<string>("Google")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<int>("HomeActiveSliderCategoryId")
                        .HasColumnType("int");

                    b.Property<string>("HomeDescription")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("HomeMainExtFileName")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("HomeMainPicture")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("HomeMetaDesc")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("HomeSummery")
                        .HasMaxLength(512)
                        .HasColumnType("nvarchar(512)");

                    b.Property<string>("HomeTitle")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("Instagram")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("IsMultipleCreate")
                        .HasColumnType("bit");

                    b.Property<string>("MailDisplayName")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("MailPassword")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("MailSmtpDomain")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("MailUserName")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("MapUrl")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Mobile")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<bool>("MobileSupportButtonIsShow")
                        .HasColumnType("bit");

                    b.Property<string>("OrderNotificationPhoneNumber")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<int>("OrderNumber")
                        .HasColumnType("int");

                    b.Property<string>("PaymentAccepted")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("PriceRange")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("PricingAccountDescription")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PricingContent")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PricingIconPicture")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PricingMetaDesc")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PricingPicture")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PricingTitle")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("ResetPasswordPatternCode")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<byte>("SendNotificationState")
                        .HasColumnType("tinyint");

                    b.Property<double>("ShippingPrice")
                        .HasColumnType("float");

                    b.Property<string>("ShippingTimeRange")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("SiteAlternateName")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("SiteName")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("SmsCenter")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("SmsPass")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("SmsUser")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("SupportBoxDesc")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("SupportBoxTitle")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("Tel")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("Telegram")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("Twitter")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("UseSliderOrVideoInHome")
                        .HasColumnType("bit");

                    b.Property<string>("Whatsapp")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("ZarinpalMerchant")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("ZarinpalMode")
                        .HasColumnType("bit");

                    b.Property<string>("ZarinpalUrl")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Config");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            ActiveBaseCityId = 245,
                            Domain = "https://localhost:5001",
                            ExternalLoginState = 1,
                            FoundingDate = new DateTime(2021, 9, 11, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            FreeShippingLimit = 200000.0,
                            HomeActiveSliderCategoryId = 1,
                            IsMultipleCreate = false,
                            MobileSupportButtonIsShow = false,
                            OrderNumber = 10000,
                            SendNotificationState = (byte)1,
                            ShippingPrice = 25000.0,
                            SiteAlternateName = "ravil",
                            SiteName = "راویل",
                            UseSliderOrVideoInHome = false,
                            ZarinpalMode = false
                        });
                });

            modelBuilder.Entity("Ravil.Domain.Models.Data.ContactUs", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("AdminId")
                        .HasMaxLength(450)
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("AdminName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("Answer")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("AnswerDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("FullName")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<bool>("IsReadByAdmin")
                        .HasColumnType("bit");

                    b.Property<DateTime>("LastDeleteBicycleDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("LastDeletePermanentDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("LastUpdateDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Message")
                        .IsRequired()
                        .HasMaxLength(1024)
                        .HasColumnType("nvarchar(1024)");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasMaxLength(11)
                        .HasColumnType("nvarchar(11)");

                    b.Property<bool>("StatusAnswer")
                        .HasColumnType("bit");

                    b.Property<string>("Subject")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserIp")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("ContactUs");
                });

            modelBuilder.Entity("Ravil.Domain.Models.Data.DayOfWeek", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("AlternateName")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<bool>("IsSelectedPersianName")
                        .HasColumnType("bit");

                    b.Property<string>("PersianName")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<byte>("Sort")
                        .HasColumnType("tinyint");

                    b.HasKey("Id");

                    b.ToTable("DayOfWeek", "Schema");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            AlternateName = "Saturday",
                            IsSelectedPersianName = true,
                            PersianName = "شنبه",
                            Sort = (byte)2
                        },
                        new
                        {
                            Id = 2,
                            AlternateName = "Sunday",
                            IsSelectedPersianName = true,
                            PersianName = "یک شنبه",
                            Sort = (byte)3
                        },
                        new
                        {
                            Id = 3,
                            AlternateName = "Monday",
                            IsSelectedPersianName = true,
                            PersianName = "دوشنبه",
                            Sort = (byte)4
                        },
                        new
                        {
                            Id = 4,
                            AlternateName = "Tuesday",
                            IsSelectedPersianName = true,
                            PersianName = "سه شنبه",
                            Sort = (byte)5
                        },
                        new
                        {
                            Id = 5,
                            AlternateName = "Wednesday",
                            IsSelectedPersianName = true,
                            PersianName = "چهارشنبه",
                            Sort = (byte)6
                        },
                        new
                        {
                            Id = 6,
                            AlternateName = "Thursday",
                            IsSelectedPersianName = true,
                            PersianName = "پنج شنبه",
                            Sort = (byte)7
                        },
                        new
                        {
                            Id = 7,
                            AlternateName = "Friday",
                            IsSelectedPersianName = true,
                            PersianName = "جمعه",
                            Sort = (byte)8
                        });
                });

            modelBuilder.Entity("Ravil.Domain.Models.Data.Faq", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Answer")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("CategoryId")
                        .HasColumnType("int");

                    b.Property<string>("IconPicture")
                        .HasMaxLength(60)
                        .HasColumnType("nvarchar(60)");

                    b.Property<string>("Question")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Sort")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CategoryId");

                    b.ToTable("Faqs");
                });

            modelBuilder.Entity("Ravil.Domain.Models.Data.FaqCategory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("ParentId")
                        .HasColumnType("int");

                    b.Property<byte>("Sort")
                        .HasColumnType("tinyint");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.ToTable("FaqCategory");
                });

            modelBuilder.Entity("Ravil.Domain.Models.Data.FeedbackSlider", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("Picture")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<byte>("Sort")
                        .HasColumnType("tinyint");

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("UserRole")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.ToTable("FeedbackSlider");
                });

            modelBuilder.Entity("Ravil.Domain.Models.Data.Job", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("AdminId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("AdminName")
                        .HasMaxLength(450)
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AverageRate")
                        .HasColumnType("int");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<bool>("IsResizePicture")
                        .HasColumnType("bit");

                    b.Property<int?>("JobBrandId")
                        .HasColumnType("int");

                    b.Property<string>("LargePicture")
                        .HasMaxLength(120)
                        .HasColumnType("nvarchar(120)");

                    b.Property<DateTime>("LastDeleteBicycleDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("LastDeletePermanentDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("LastUpdateDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("PhoneNumberInfos")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Route")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool?>("ShowFirstPhoneMobileInSite")
                        .HasColumnType("bit");

                    b.Property<bool?>("ShowPhoneTelInSite")
                        .HasColumnType("bit");

                    b.Property<string>("SmallPicture")
                        .HasMaxLength(120)
                        .HasColumnType("nvarchar(120)");

                    b.Property<string>("SocialMediaInfos")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SubTitle")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("Summary")
                        .HasMaxLength(512)
                        .HasColumnType("nvarchar(512)");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<int>("ViewCountTotal")
                        .HasColumnType("int");

                    b.Property<string>("WebSiteName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("JobBrandId");

                    b.ToTable("Job");
                });

            modelBuilder.Entity("Ravil.Domain.Models.Data.JobBranch", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("AddressId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("AdminId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("AdminName")
                        .HasMaxLength(450)
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AverageRate")
                        .HasColumnType("int");

                    b.Property<string>("BranchContent")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("BranchVideo")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("CanonicalMeta")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("ConfirmationDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(512)
                        .HasColumnType("nvarchar(512)");

                    b.Property<bool>("IndexMeta")
                        .HasColumnType("bit");

                    b.Property<bool>("IsAdminCreator")
                        .HasColumnType("bit");

                    b.Property<bool>("IsConfirmedByAdmin")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<bool>("IsOffer")
                        .HasColumnType("bit");

                    b.Property<bool>("IsResizePicture")
                        .HasColumnType("bit");

                    b.Property<int>("JobId")
                        .HasColumnType("int");

                    b.Property<int>("JobTimeWorkType")
                        .HasColumnType("int");

                    b.Property<string>("LargePicture")
                        .HasMaxLength(512)
                        .HasColumnType("nvarchar(512)");

                    b.Property<DateTime>("LastDeleteBicycleDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("LastDeletePermanentDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("LastUpdateDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("MapUrl")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("MetaCanonicalUrl")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("MetaDesc")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("MetaTitle")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("Route")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("SmallPicture")
                        .HasMaxLength(512)
                        .HasColumnType("nvarchar(512)");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("UserOwnerId")
                        .IsRequired()
                        .HasMaxLength(450)
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("ViewCount")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("JobId");

                    b.HasIndex("UserOwnerId");

                    b.ToTable("JobBranch");
                });

            modelBuilder.Entity("Ravil.Domain.Models.Data.JobBranchAttr", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("AttrId")
                        .HasColumnType("int");

                    b.Property<string>("BranchId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("ValueId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("AttrId");

                    b.HasIndex("BranchId");

                    b.HasIndex("ValueId");

                    b.ToTable("JobBranchAttr");
                });

            modelBuilder.Entity("Ravil.Domain.Models.Data.JobBranchGallery", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ImageName")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("JobBranchId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<byte>("Sort")
                        .HasColumnType("tinyint");

                    b.HasKey("Id");

                    b.HasIndex("JobBranchId");

                    b.ToTable("JobBranchGallery");
                });

            modelBuilder.Entity("Ravil.Domain.Models.Data.JobBranchShortLink", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("JobBranchId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ShortKey")
                        .IsRequired()
                        .HasMaxLength(5)
                        .HasColumnType("nvarchar(5)");

                    b.Property<int>("Type")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("JobBranchId");

                    b.ToTable("JobBranchShortLink");
                });

            modelBuilder.Entity("Ravil.Domain.Models.Data.JobBranchTag", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("JobBranchId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("TagId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("JobBranchId");

                    b.HasIndex("TagId");

                    b.ToTable("JobBranchTag");
                });

            modelBuilder.Entity("Ravil.Domain.Models.Data.JobCategory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("CategoryId")
                        .HasColumnType("int");

                    b.Property<int>("JobId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CategoryId");

                    b.HasIndex("JobId");

                    b.ToTable("JobCategory");
                });

            modelBuilder.Entity("Ravil.Domain.Models.Data.JobService", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("JobBranchId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("ServiceId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("JobBranchId");

                    b.HasIndex("ServiceId");

                    b.ToTable("JobService");
                });

            modelBuilder.Entity("Ravil.Domain.Models.Data.JobTag", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("JobId")
                        .HasColumnType("int");

                    b.Property<int>("TagId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("JobId");

                    b.HasIndex("TagId");

                    b.ToTable("JobTag");
                });

            modelBuilder.Entity("Ravil.Domain.Models.Data.JobTimeWork", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("DayOfWeekId")
                        .HasColumnType("int");

                    b.Property<string>("EndTime")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("JobBranchId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("StartTime")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("DayOfWeekId");

                    b.HasIndex("JobBranchId");

                    b.ToTable("JobTimeWork");
                });

            modelBuilder.Entity("Ravil.Domain.Models.Data.Location", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("AddressId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<DateTime>("LastDeleteBicycleDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("LastDeletePermanentDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("LastUpdateDate")
                        .HasColumnType("datetime2");

                    b.Property<double>("Lat")
                        .HasColumnType("float");

                    b.Property<double>("Long")
                        .HasColumnType("float");

                    b.Property<int>("PlaceType")
                        .HasColumnType("int");

                    b.Property<string>("Route")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.ToTable("Location");
                });

            modelBuilder.Entity("Ravil.Domain.Models.Data.MainSlider", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("CityId")
                        .HasColumnType("int");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<int?>("ExpireDay")
                        .HasColumnType("int");

                    b.Property<string>("JobBranchId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LargePicture")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("LinkPage")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SmallPicture")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<byte>("Sort")
                        .HasColumnType("tinyint");

                    b.Property<int>("StateId")
                        .HasColumnType("int");

                    b.Property<string>("Title")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.HasKey("Id");

                    b.HasIndex("CityId");

                    b.HasIndex("JobBranchId");

                    b.HasIndex("StateId");

                    b.ToTable("MainSlider");
                });

            modelBuilder.Entity("Ravil.Domain.Models.Data.Order", b =>
                {
                    b.Property<string>("Id")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int>("AccountId")
                        .HasColumnType("int");

                    b.Property<string>("AdditionalInfo")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("AdminId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("AdminName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CookieValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("Discount")
                        .HasColumnType("int");

                    b.Property<double>("DiscountAmount")
                        .HasColumnType("float");

                    b.Property<DateTime>("ExpireDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("ExpireDay")
                        .HasColumnType("int");

                    b.Property<bool>("IsActiveAccount")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("JobBranchId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("JobId")
                        .IsRequired()
                        .HasMaxLength(450)
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("LastDeleteBicycleDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("LastDeletePermanentDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("LastUpdateDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("OrderNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<double?>("PaymentAmount")
                        .HasColumnType("float");

                    b.Property<int?>("PaymentPortalId")
                        .HasColumnType("int");

                    b.Property<double>("Price")
                        .HasColumnType("float");

                    b.Property<int?>("PromotionCodeId")
                        .HasColumnType("int");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasMaxLength(450)
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("AccountId");

                    b.HasIndex("JobBranchId");

                    b.HasIndex("PaymentPortalId");

                    b.HasIndex("PromotionCodeId");

                    b.HasIndex("UserId");

                    b.ToTable("Order");
                });

            modelBuilder.Entity("Ravil.Domain.Models.Data.PaymentPortal", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Picture")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<bool>("Status")
                        .HasColumnType("bit");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.ToTable("PaymentPortal");
                });

            modelBuilder.Entity("Ravil.Domain.Models.Data.PromotionCode", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<double>("Amount")
                        .HasColumnType("float");

                    b.Property<double?>("CartMaximum")
                        .HasColumnType("float");

                    b.Property<double?>("CartMinimum")
                        .HasColumnType("float");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasMaxLength(12)
                        .HasColumnType("nvarchar(12)");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("ExpireDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsActiveForDiscounts")
                        .HasColumnType("bit");

                    b.Property<bool>("IsUseLimit")
                        .HasColumnType("bit");

                    b.Property<bool>("Status")
                        .HasColumnType("bit");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<int>("Type")
                        .HasColumnType("int");

                    b.Property<short?>("UseCountLimit")
                        .HasColumnType("smallint");

                    b.HasKey("Id");

                    b.ToTable("PromotionCode");
                });

            modelBuilder.Entity("Ravil.Domain.Models.Data.RedirectionUrl", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("DestinationUrl")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LatestUrl")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("RedirectionType")
                        .HasColumnType("int");

                    b.Property<bool>("Status")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.ToTable("RedirectionUrl");
                });

            modelBuilder.Entity("Ravil.Domain.Models.Data.Service", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<DateTime>("LastDeleteBicycleDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("LastDeletePermanentDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("LastUpdateDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("ParentId")
                        .HasColumnType("int");

                    b.Property<string>("ServicePicture")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("ServiceSummary")
                        .HasMaxLength(512)
                        .HasColumnType("nvarchar(512)");

                    b.Property<string>("ServiceTitle")
                        .IsRequired()
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<byte>("Sort")
                        .HasColumnType("tinyint");

                    b.HasKey("Id");

                    b.ToTable("Service");
                });

            modelBuilder.Entity("Ravil.Domain.Models.Data.ShortLink", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("ItemId")
                        .HasColumnType("int");

                    b.Property<string>("ShortKey")
                        .IsRequired()
                        .HasMaxLength(5)
                        .HasColumnType("nvarchar(5)");

                    b.Property<int>("Type")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("ShortLink");
                });

            modelBuilder.Entity("Ravil.Domain.Models.Data.State", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("CanonicalMeta")
                        .HasColumnType("bit");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IndexMeta")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<bool>("IsResizePicture")
                        .HasColumnType("bit");

                    b.Property<DateTime>("LastDeleteBicycleDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("LastDeletePermanentDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("LastUpdateDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("MetaCanonicalUrl")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("MetaDesc")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("MetaTitle")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<double>("Multiplier")
                        .HasColumnType("float");

                    b.Property<string>("Picture")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<int>("StateBaseId")
                        .HasColumnType("int");

                    b.Property<string>("Subtitle")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("StateBaseId")
                        .IsUnique();

                    b.ToTable("State");
                });

            modelBuilder.Entity("Ravil.Domain.Models.Data.StateBase", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<double>("Multiplier")
                        .HasColumnType("float");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.ToTable("StateBase");
                });

            modelBuilder.Entity("Ravil.Domain.Models.Data.Tag", b =>
                {
                    b.Property<int>("TagId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("IconHtmlCode")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("IconPicture")
                        .HasMaxLength(60)
                        .HasColumnType("nvarchar(60)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("Status")
                        .HasColumnType("bit");

                    b.Property<int>("Type")
                        .HasColumnType("int");

                    b.Property<string>("UniqueName")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("TagId");

                    b.ToTable("Tag");
                });

            modelBuilder.Entity("Ravil.Domain.Models.Data.Team", b =>
                {
                    b.Property<int>("TeamId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Avatar")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Degree")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FullName")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("HoverPic")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Instagram")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<byte>("Sort")
                        .HasColumnType("tinyint");

                    b.Property<string>("Telegram")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("Twitter")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("WhatsApp")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("TeamId");

                    b.ToTable("Team");
                });

            modelBuilder.Entity("Ravil.Domain.Models.Data.Transaction", b =>
                {
                    b.Property<string>("Id")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("AdminId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("AdminName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ApplicationUserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("AuthCode")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<DateTime>("LastDeleteBicycleDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("LastDeletePermanentDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("LastUpdateDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Number")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("OrderId")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<double?>("PaymentAmount")
                        .HasColumnType("float");

                    b.Property<DateTime?>("PaymentDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("PaymentPortalId")
                        .HasColumnType("int");

                    b.Property<string>("RefId")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("TrackingCode")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasMaxLength(450)
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("ApplicationUserId");

                    b.HasIndex("OrderId");

                    b.HasIndex("PaymentPortalId");

                    b.ToTable("Transaction");
                });

            modelBuilder.Entity("Ravil.Domain.Models.Data.UploadedFile", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Extension")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<int>("FileType")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.ToTable("UploadedFiles");
                });

            modelBuilder.Entity("Ravil.Domain.Models.Data.UserAddress", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("CityBaseId")
                        .HasColumnType("int");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasMaxLength(11)
                        .HasColumnType("nvarchar(11)");

                    b.Property<string>("PostalAddress")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PostalCode")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<string>("ReceiverName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("StateBaseId")
                        .HasColumnType("int");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasMaxLength(450)
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("CityBaseId");

                    b.HasIndex("StateBaseId");

                    b.HasIndex("UserId");

                    b.ToTable("UserAddress");
                });

            modelBuilder.Entity("Ravil.Domain.Models.Data.UserBannerClick", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("BannerId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasMaxLength(450)
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("BannerId");

                    b.HasIndex("UserId");

                    b.ToTable("UserBannerClick");
                });

            modelBuilder.Entity("Ravil.Domain.Models.Data.UserBannerView", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("BannerId")
                        .HasColumnType("int");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasMaxLength(450)
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("BannerId");

                    b.HasIndex("UserId");

                    b.ToTable("UserBannerView");
                });

            modelBuilder.Entity("Ravil.Domain.Models.Data.UserBlogAction", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("ActionDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("ActionId")
                        .HasColumnType("int");

                    b.Property<int>("ActionScore")
                        .HasColumnType("int");

                    b.Property<int>("BlogActionType")
                        .HasColumnType("int");

                    b.Property<int>("BlogId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<DateTime>("LastDeleteBicycleDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("LastDeletePermanentDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("LastUpdateDate")
                        .HasColumnType("datetime2");

                    b.Property<byte?>("Rating")
                        .HasColumnType("tinyint");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasMaxLength(450)
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("BlogId");

                    b.HasIndex("UserId");

                    b.ToTable("UserBlogAction");
                });

            modelBuilder.Entity("Ravil.Domain.Models.Data.UserBlogLike", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("BlogId")
                        .HasColumnType("int");

                    b.Property<DateTime>("LikeTimeDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasMaxLength(450)
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("BlogId");

                    b.HasIndex("UserId");

                    b.ToTable("UserBlogLike");
                });

            modelBuilder.Entity("Ravil.Domain.Models.Data.UserBookMark", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("BlogId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("JobBranchId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("LastDeleteBicycleDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("LastDeletePermanentDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("LastUpdateDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("UserBookMarkType")
                        .HasColumnType("int");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasMaxLength(450)
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("UserIp")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("JobBranchId");

                    b.HasIndex("UserId");

                    b.ToTable("UserBookMark");
                });

            modelBuilder.Entity("Ravil.Domain.Models.Data.UserJobAction", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("ActionDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("ActionId")
                        .HasColumnType("int");

                    b.Property<int>("ActionScore")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<int>("JobActionType")
                        .HasColumnType("int");

                    b.Property<string>("JobBranchId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("LastDeleteBicycleDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("LastDeletePermanentDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("LastUpdateDate")
                        .HasColumnType("datetime2");

                    b.Property<byte>("Rating")
                        .HasColumnType("tinyint");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasMaxLength(450)
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("JobBranchId");

                    b.HasIndex("UserId");

                    b.ToTable("UserJobAction");
                });

            modelBuilder.Entity("Ravil.Domain.Models.Data.UserLikedGallery", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("BlogId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("JobBranchId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("LastDeleteBicycleDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("LastDeletePermanentDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("LastUpdateDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasMaxLength(450)
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("UserIp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("UserLikedType")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("UserLikedGallery");
                });

            modelBuilder.Entity("Ravil.Domain.Models.Data.UsersFeedbackSlider", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("JobBranchId")
                        .IsRequired()
                        .HasMaxLength(450)
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("JobId")
                        .HasColumnType("int");

                    b.Property<string>("Picture")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<byte>("Sort")
                        .HasColumnType("tinyint");

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("UserRole")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("JobBranchId");

                    b.ToTable("UsersFeedbackSlider");
                });

            modelBuilder.Entity("Ravil.Domain.Models.Schema.Answer", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreateDateAnswer")
                        .HasColumnType("datetime2");

                    b.Property<int>("QuestionId")
                        .HasColumnType("int");

                    b.Property<byte>("Sort")
                        .HasColumnType("tinyint");

                    b.Property<string>("Text")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("QuestionId");

                    b.ToTable("Answer", "Schema");
                });

            modelBuilder.Entity("Ravil.Domain.Models.Schema.Article", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ArticleBody")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ArticlePicture")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ArticlePictureUrl")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("AuthorId")
                        .IsRequired()
                        .HasMaxLength(450)
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("BlogId")
                        .HasColumnType("int");

                    b.Property<int>("CreatorId")
                        .HasColumnType("int");

                    b.Property<DateTime>("DateModified")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DatePublished")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Headline")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("PersonId")
                        .HasColumnType("int");

                    b.Property<int>("PublisherId")
                        .HasColumnType("int");

                    b.Property<string>("PublisherOrganization")
                        .HasColumnType("nvarchar(max)");

                    b.Property<byte>("Sort")
                        .HasColumnType("tinyint");

                    b.HasKey("Id");

                    b.HasIndex("AuthorId");

                    b.HasIndex("PersonId");

                    b.ToTable("Article", "Schema");
                });

            modelBuilder.Entity("Ravil.Domain.Models.Schema.BrandOwner", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("AlternateName")
                        .IsRequired()
                        .HasMaxLength(512)
                        .HasColumnType("nvarchar(512)");

                    b.Property<string>("Introduction")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Logo")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("LogoPath")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LogoUrl")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("OwnerBrandId")
                        .HasColumnType("int");

                    b.Property<byte>("Sort")
                        .HasColumnType("tinyint");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("OwnerBrandId");

                    b.ToTable("BrandOwner", "Schema");
                });

            modelBuilder.Entity("Ravil.Domain.Models.Schema.BreadCrumb", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("BreadCrumbAlternateName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("BreadCrumbItemId")
                        .HasColumnType("int");

                    b.Property<string>("BreadCrumbPath")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("BreadCrumbPicture")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("BreadCrumbPictureUrl")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("BreadCrumbTitle")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<byte>("BreadCrumbType")
                        .HasColumnType("tinyint");

                    b.Property<byte>("Sort")
                        .HasColumnType("tinyint");

                    b.HasKey("Id");

                    b.ToTable("BreadCrumb", "Schema");
                });

            modelBuilder.Entity("Ravil.Domain.Models.Schema.DayOfWeeks", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("IsSelected")
                        .HasColumnType("bit");

                    b.Property<bool>("IsSelectedPersianName")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("PersianName")
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<byte>("Sort")
                        .HasColumnType("tinyint");

                    b.Property<int?>("TimeCloseId")
                        .HasColumnType("int");

                    b.Property<int?>("TimeOpenId")
                        .HasColumnType("int");

                    b.Property<int?>("TimeWorkId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("TimeCloseId");

                    b.HasIndex("TimeOpenId");

                    b.HasIndex("TimeWorkId");

                    b.ToTable("DayOfWeeks", "Schema");
                });

            modelBuilder.Entity("Ravil.Domain.Models.Schema.GeoLocation", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<double>("Latitude")
                        .HasColumnType("float");

                    b.Property<double>("Longitude")
                        .HasColumnType("float");

                    b.HasKey("Id");

                    b.ToTable("GeoLocation", "Schema");
                });

            modelBuilder.Entity("Ravil.Domain.Models.Schema.Person", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("AgePerson")
                        .HasMaxLength(3)
                        .HasColumnType("nvarchar(3)");

                    b.Property<DateTime>("BirthDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DeathDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("FamilyName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ImageAvatar")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ImageAvatarPath")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NationalCode")
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasMaxLength(11)
                        .HasColumnType("nvarchar(11)");

                    b.Property<byte>("Sort")
                        .HasColumnType("tinyint");

                    b.Property<string>("SubName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Person", "Schema");
                });

            modelBuilder.Entity("Ravil.Domain.Models.Schema.Question", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<byte>("QuestionType")
                        .HasColumnType("tinyint");

                    b.Property<int>("QuestionTypeId")
                        .HasColumnType("int");

                    b.Property<byte>("Sort")
                        .HasColumnType("tinyint");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Question", "Schema");
                });

            modelBuilder.Entity("Ravil.Domain.Models.Schema.ReviewItem", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("AuthorId")
                        .HasColumnType("int");

                    b.Property<DateTime>("DatePublished")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasMaxLength(512)
                        .HasColumnType("nvarchar(512)");

                    b.Property<int>("ItemReviewedId")
                        .HasColumnType("int");

                    b.Property<string>("ReviewAspect")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ReviewBody")
                        .HasColumnType("nvarchar(max)");

                    b.Property<byte>("ReviewItemType")
                        .HasColumnType("tinyint");

                    b.Property<string>("ReviewTitle")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.HasIndex("AuthorId");

                    b.ToTable("ReviewItem", "Schema");
                });

            modelBuilder.Entity("Ravil.Domain.Models.Schema.TimeClose", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("TimeCloses")
                        .HasColumnType("datetime2");

                    b.Property<int?>("TimeWorksId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("TimeWorksId");

                    b.ToTable("TimeClose", "Schema");
                });

            modelBuilder.Entity("Ravil.Domain.Models.Schema.TimeOpens", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("TimeOpen")
                        .HasColumnType("datetime2");

                    b.Property<int?>("TimeWorksId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("TimeWorksId");

                    b.ToTable("TimeOpens", "Schema");
                });

            modelBuilder.Entity("Ravil.Domain.Models.Schema.TimeWorks", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<byte>("Sort")
                        .HasColumnType("tinyint");

                    b.HasKey("Id");

                    b.ToTable("TimeWorks", "Schema");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Ravil.Domain.Models.Data.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Ravil.Domain.Models.Data.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Ravil.Domain.Models.Data.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Ravil.Domain.Models.Data.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Ravil.Domain.Models.Data.Account", b =>
                {
                    b.HasOne("Ravil.Domain.Models.Data.AccountCategory", "AccountCategory")
                        .WithMany("Accounts")
                        .HasForeignKey("AccountCategoryId");

                    b.HasOne("Ravil.Domain.Models.Data.AccountLevel", "AccountLevel")
                        .WithMany("Accounts")
                        .HasForeignKey("AccountLevelId");

                    b.Navigation("AccountCategory");

                    b.Navigation("AccountLevel");
                });

            modelBuilder.Entity("Ravil.Domain.Models.Data.AccountAttr", b =>
                {
                    b.HasOne("Ravil.Domain.Models.Data.Account", "Account")
                        .WithMany("AccountAttrs")
                        .HasForeignKey("AccountId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Ravil.Domain.Models.Data.AttrAccount", "AttrAccount")
                        .WithMany("AttrAccounts")
                        .HasForeignKey("AttrId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Ravil.Domain.Models.Data.AttrAccountValue", "AttrAccountValue")
                        .WithMany("AccountAttrs")
                        .HasForeignKey("ValueId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Account");

                    b.Navigation("AttrAccount");

                    b.Navigation("AttrAccountValue");
                });

            modelBuilder.Entity("Ravil.Domain.Models.Data.Address", b =>
                {
                    b.HasOne("Ravil.Domain.Models.Data.CityBase", "City")
                        .WithMany("Addresses")
                        .HasForeignKey("CityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Ravil.Domain.Models.Data.JobBranch", "JobBranch")
                        .WithOne("Address")
                        .HasForeignKey("Ravil.Domain.Models.Data.Address", "JobBranchId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Ravil.Domain.Models.Data.Location", "Location")
                        .WithOne("Address")
                        .HasForeignKey("Ravil.Domain.Models.Data.Address", "LocationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Ravil.Domain.Models.Data.StateBase", "State")
                        .WithMany("Addresses")
                        .HasForeignKey("StateId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("City");

                    b.Navigation("JobBranch");

                    b.Navigation("Location");

                    b.Navigation("State");
                });

            modelBuilder.Entity("Ravil.Domain.Models.Data.AnswerComment", b =>
                {
                    b.HasOne("Ravil.Domain.Models.Data.Comment", "Comment")
                        .WithMany("AnswerComments")
                        .HasForeignKey("CommentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Comment");
                });

            modelBuilder.Entity("Ravil.Domain.Models.Data.ApplicationUser", b =>
                {
                    b.HasOne("Ravil.Domain.Models.Data.CityBase", "CityBase")
                        .WithMany("ApplicationUsers")
                        .HasForeignKey("CityBaseId");

                    b.HasOne("Ravil.Domain.Models.Data.StateBase", "StateBase")
                        .WithMany("ApplicationUsers")
                        .HasForeignKey("StateBaseId");

                    b.HasOne("Ravil.Domain.Models.Data.State", null)
                        .WithMany("ApplicationUsers")
                        .HasForeignKey("StateId");

                    b.Navigation("CityBase");

                    b.Navigation("StateBase");
                });

            modelBuilder.Entity("Ravil.Domain.Models.Data.Attr", b =>
                {
                    b.HasOne("Ravil.Domain.Models.Data.AttrCategory", "AttrCategory")
                        .WithMany("Attributes")
                        .HasForeignKey("AttrCategoryId");

                    b.HasOne("Ravil.Domain.Models.Data.Category", "Category")
                        .WithMany("Attributes")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("AttrCategory");

                    b.Navigation("Category");
                });

            modelBuilder.Entity("Ravil.Domain.Models.Data.AttrAccount", b =>
                {
                    b.HasOne("Ravil.Domain.Models.Data.AttrCategory", "AttrCategory")
                        .WithMany("AttributeAccounts")
                        .HasForeignKey("AttrCategoryId");

                    b.Navigation("AttrCategory");
                });

            modelBuilder.Entity("Ravil.Domain.Models.Data.AttrAccountValue", b =>
                {
                    b.HasOne("Ravil.Domain.Models.Data.AttrAccount", "AttrAccount")
                        .WithMany("AttrAccountValues")
                        .HasForeignKey("AttrAccountId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("AttrAccount");
                });

            modelBuilder.Entity("Ravil.Domain.Models.Data.AttrValue", b =>
                {
                    b.HasOne("Ravil.Domain.Models.Data.Attr", "Attr")
                        .WithMany("AttrValues")
                        .HasForeignKey("AttrId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Attr");
                });

            modelBuilder.Entity("Ravil.Domain.Models.Data.Banner", b =>
                {
                    b.HasOne("Ravil.Domain.Models.Data.JobBranch", "JobBranch")
                        .WithMany("Banners")
                        .HasForeignKey("JobBranchId");

                    b.Navigation("JobBranch");
                });

            modelBuilder.Entity("Ravil.Domain.Models.Data.BlogCategoryRel", b =>
                {
                    b.HasOne("Ravil.Domain.Models.Data.BlogCategory", "BlogCategory")
                        .WithMany("BlogCategoryRels")
                        .HasForeignKey("BlogCategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Ravil.Domain.Models.Data.Blog", "Blog")
                        .WithMany("BlogCategoryRels")
                        .HasForeignKey("BlogId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Blog");

                    b.Navigation("BlogCategory");
                });

            modelBuilder.Entity("Ravil.Domain.Models.Data.BlogTag", b =>
                {
                    b.HasOne("Ravil.Domain.Models.Data.Blog", "Blog")
                        .WithMany("BlogTags")
                        .HasForeignKey("BlogId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Ravil.Domain.Models.Data.Tag", "Tag")
                        .WithMany("BlogTags")
                        .HasForeignKey("TagId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Blog");

                    b.Navigation("Tag");
                });

            modelBuilder.Entity("Ravil.Domain.Models.Data.CategoryService", b =>
                {
                    b.HasOne("Ravil.Domain.Models.Data.Category", "Category")
                        .WithMany("CategoryServices")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Ravil.Domain.Models.Data.Service", "Service")
                        .WithMany("CategoryServices")
                        .HasForeignKey("ServiceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Category");

                    b.Navigation("Service");
                });

            modelBuilder.Entity("Ravil.Domain.Models.Data.City", b =>
                {
                    b.HasOne("Ravil.Domain.Models.Data.CityBase", "CityBase")
                        .WithOne("City")
                        .HasForeignKey("Ravil.Domain.Models.Data.City", "CityBaseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CityBase");
                });

            modelBuilder.Entity("Ravil.Domain.Models.Data.CityBase", b =>
                {
                    b.HasOne("Ravil.Domain.Models.Data.StateBase", "StateBase")
                        .WithMany()
                        .HasForeignKey("StateBaseId");

                    b.Navigation("StateBase");
                });

            modelBuilder.Entity("Ravil.Domain.Models.Data.CityCategory", b =>
                {
                    b.HasOne("Ravil.Domain.Models.Data.Category", "Category")
                        .WithMany("CityCategories")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Ravil.Domain.Models.Data.City", "City")
                        .WithMany("CityCategories")
                        .HasForeignKey("CityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Category");

                    b.Navigation("City");
                });

            modelBuilder.Entity("Ravil.Domain.Models.Data.Comment", b =>
                {
                    b.HasOne("Ravil.Domain.Models.Data.Blog", null)
                        .WithMany("BlogComments")
                        .HasForeignKey("BlogId");

                    b.HasOne("Ravil.Domain.Models.Data.JobBranch", null)
                        .WithMany("Comments")
                        .HasForeignKey("JobBranchId");

                    b.HasOne("Ravil.Domain.Models.Data.ApplicationUser", "ApplicationUser")
                        .WithMany("Comments")
                        .HasForeignKey("UserId");

                    b.Navigation("ApplicationUser");
                });

            modelBuilder.Entity("Ravil.Domain.Models.Data.Faq", b =>
                {
                    b.HasOne("Ravil.Domain.Models.Data.FaqCategory", "FaqCategory")
                        .WithMany("Faqs")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("FaqCategory");
                });

            modelBuilder.Entity("Ravil.Domain.Models.Data.Job", b =>
                {
                    b.HasOne("Ravil.Domain.Models.Data.Brand", "Brand")
                        .WithMany("Jobs")
                        .HasForeignKey("JobBrandId");

                    b.Navigation("Brand");
                });

            modelBuilder.Entity("Ravil.Domain.Models.Data.JobBranch", b =>
                {
                    b.HasOne("Ravil.Domain.Models.Data.Job", "Job")
                        .WithMany("JobBranches")
                        .HasForeignKey("JobId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Ravil.Domain.Models.Data.ApplicationUser", "ApplicationUser")
                        .WithMany("JobBranches")
                        .HasForeignKey("UserOwnerId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("ApplicationUser");

                    b.Navigation("Job");
                });

            modelBuilder.Entity("Ravil.Domain.Models.Data.JobBranchAttr", b =>
                {
                    b.HasOne("Ravil.Domain.Models.Data.Attr", "Attr")
                        .WithMany("AttrJobBranches")
                        .HasForeignKey("AttrId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Ravil.Domain.Models.Data.JobBranch", "JobBranch")
                        .WithMany("JobBranchAttributes")
                        .HasForeignKey("BranchId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Ravil.Domain.Models.Data.AttrValue", "AttrValue")
                        .WithMany("JobBranchAttrs")
                        .HasForeignKey("ValueId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Attr");

                    b.Navigation("AttrValue");

                    b.Navigation("JobBranch");
                });

            modelBuilder.Entity("Ravil.Domain.Models.Data.JobBranchGallery", b =>
                {
                    b.HasOne("Ravil.Domain.Models.Data.JobBranch", "JobBranch")
                        .WithMany("JobBranchGalleries")
                        .HasForeignKey("JobBranchId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("JobBranch");
                });

            modelBuilder.Entity("Ravil.Domain.Models.Data.JobBranchShortLink", b =>
                {
                    b.HasOne("Ravil.Domain.Models.Data.JobBranch", "JobBranch")
                        .WithMany("JobBranchShortLinks")
                        .HasForeignKey("JobBranchId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("JobBranch");
                });

            modelBuilder.Entity("Ravil.Domain.Models.Data.JobBranchTag", b =>
                {
                    b.HasOne("Ravil.Domain.Models.Data.JobBranch", "JobBranch")
                        .WithMany("JobBranchTags")
                        .HasForeignKey("JobBranchId");

                    b.HasOne("Ravil.Domain.Models.Data.Tag", "Tag")
                        .WithMany("JobBranchTags")
                        .HasForeignKey("TagId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("JobBranch");

                    b.Navigation("Tag");
                });

            modelBuilder.Entity("Ravil.Domain.Models.Data.JobCategory", b =>
                {
                    b.HasOne("Ravil.Domain.Models.Data.Category", "Category")
                        .WithMany("JobCategories")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Ravil.Domain.Models.Data.Job", "Job")
                        .WithMany("JobCategories")
                        .HasForeignKey("JobId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Category");

                    b.Navigation("Job");
                });

            modelBuilder.Entity("Ravil.Domain.Models.Data.JobService", b =>
                {
                    b.HasOne("Ravil.Domain.Models.Data.JobBranch", "JobBranch")
                        .WithMany("JobServices")
                        .HasForeignKey("JobBranchId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Ravil.Domain.Models.Data.Service", "Service")
                        .WithMany("JobServices")
                        .HasForeignKey("ServiceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("JobBranch");

                    b.Navigation("Service");
                });

            modelBuilder.Entity("Ravil.Domain.Models.Data.JobTag", b =>
                {
                    b.HasOne("Ravil.Domain.Models.Data.Job", "Job")
                        .WithMany("JobTags")
                        .HasForeignKey("JobId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Ravil.Domain.Models.Data.Tag", "Tag")
                        .WithMany("JobTags")
                        .HasForeignKey("TagId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Job");

                    b.Navigation("Tag");
                });

            modelBuilder.Entity("Ravil.Domain.Models.Data.JobTimeWork", b =>
                {
                    b.HasOne("Ravil.Domain.Models.Data.DayOfWeek", "DayOfWeek")
                        .WithMany("JobTimeWorks")
                        .HasForeignKey("DayOfWeekId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Ravil.Domain.Models.Data.JobBranch", "JobBranch")
                        .WithMany("JobTimeWorks")
                        .HasForeignKey("JobBranchId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("DayOfWeek");

                    b.Navigation("JobBranch");
                });

            modelBuilder.Entity("Ravil.Domain.Models.Data.MainSlider", b =>
                {
                    b.HasOne("Ravil.Domain.Models.Data.CityBase", "City")
                        .WithMany("MainSliders")
                        .HasForeignKey("CityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Ravil.Domain.Models.Data.JobBranch", "JobBranch")
                        .WithMany("MainSliders")
                        .HasForeignKey("JobBranchId");

                    b.HasOne("Ravil.Domain.Models.Data.StateBase", "State")
                        .WithMany("MainSliders")
                        .HasForeignKey("StateId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("City");

                    b.Navigation("JobBranch");

                    b.Navigation("State");
                });

            modelBuilder.Entity("Ravil.Domain.Models.Data.Order", b =>
                {
                    b.HasOne("Ravil.Domain.Models.Data.Account", "Account")
                        .WithMany("Orders")
                        .HasForeignKey("AccountId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Ravil.Domain.Models.Data.JobBranch", "JobBranch")
                        .WithMany("Orders")
                        .HasForeignKey("JobBranchId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Ravil.Domain.Models.Data.PaymentPortal", "PaymentPortal")
                        .WithMany()
                        .HasForeignKey("PaymentPortalId");

                    b.HasOne("Ravil.Domain.Models.Data.PromotionCode", "PromotionCode")
                        .WithMany("Orders")
                        .HasForeignKey("PromotionCodeId");

                    b.HasOne("Ravil.Domain.Models.Data.ApplicationUser", "ApplicationUser")
                        .WithMany("Orders")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Account");

                    b.Navigation("ApplicationUser");

                    b.Navigation("JobBranch");

                    b.Navigation("PaymentPortal");

                    b.Navigation("PromotionCode");
                });

            modelBuilder.Entity("Ravil.Domain.Models.Data.State", b =>
                {
                    b.HasOne("Ravil.Domain.Models.Data.StateBase", "StateBase")
                        .WithOne("State")
                        .HasForeignKey("Ravil.Domain.Models.Data.State", "StateBaseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("StateBase");
                });

            modelBuilder.Entity("Ravil.Domain.Models.Data.Transaction", b =>
                {
                    b.HasOne("Ravil.Domain.Models.Data.ApplicationUser", null)
                        .WithMany("Transactions")
                        .HasForeignKey("ApplicationUserId");

                    b.HasOne("Ravil.Domain.Models.Data.Order", "Order")
                        .WithMany("Transactions")
                        .HasForeignKey("OrderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Ravil.Domain.Models.Data.PaymentPortal", "PaymentPortal")
                        .WithMany()
                        .HasForeignKey("PaymentPortalId");

                    b.Navigation("Order");

                    b.Navigation("PaymentPortal");
                });

            modelBuilder.Entity("Ravil.Domain.Models.Data.UserAddress", b =>
                {
                    b.HasOne("Ravil.Domain.Models.Data.CityBase", "CityBase")
                        .WithMany("UserAddresses")
                        .HasForeignKey("CityBaseId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Ravil.Domain.Models.Data.StateBase", "StateBase")
                        .WithMany("UserAddresses")
                        .HasForeignKey("StateBaseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Ravil.Domain.Models.Data.ApplicationUser", "ApplicationUser")
                        .WithMany("UserAddresses")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("ApplicationUser");

                    b.Navigation("CityBase");

                    b.Navigation("StateBase");
                });

            modelBuilder.Entity("Ravil.Domain.Models.Data.UserBannerClick", b =>
                {
                    b.HasOne("Ravil.Domain.Models.Data.Banner", "Banner")
                        .WithMany("UserBannerClicks")
                        .HasForeignKey("BannerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Ravil.Domain.Models.Data.ApplicationUser", "ApplicationUser")
                        .WithMany("UserBannerClicks")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ApplicationUser");

                    b.Navigation("Banner");
                });

            modelBuilder.Entity("Ravil.Domain.Models.Data.UserBannerView", b =>
                {
                    b.HasOne("Ravil.Domain.Models.Data.Banner", "Banner")
                        .WithMany("UserBannerViews")
                        .HasForeignKey("BannerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Ravil.Domain.Models.Data.ApplicationUser", "ApplicationUser")
                        .WithMany("UserBannerViews")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ApplicationUser");

                    b.Navigation("Banner");
                });

            modelBuilder.Entity("Ravil.Domain.Models.Data.UserBlogAction", b =>
                {
                    b.HasOne("Ravil.Domain.Models.Data.Blog", "Blog")
                        .WithMany("BlogUserActions")
                        .HasForeignKey("BlogId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Ravil.Domain.Models.Data.ApplicationUser", "ApplicationUser")
                        .WithMany("UserBlogActions")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ApplicationUser");

                    b.Navigation("Blog");
                });

            modelBuilder.Entity("Ravil.Domain.Models.Data.UserBlogLike", b =>
                {
                    b.HasOne("Ravil.Domain.Models.Data.Blog", "Blog")
                        .WithMany("BlogUserLikes")
                        .HasForeignKey("BlogId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Ravil.Domain.Models.Data.ApplicationUser", "ApplicationUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ApplicationUser");

                    b.Navigation("Blog");
                });

            modelBuilder.Entity("Ravil.Domain.Models.Data.UserBookMark", b =>
                {
                    b.HasOne("Ravil.Domain.Models.Data.JobBranch", null)
                        .WithMany("JobUserBookMarks")
                        .HasForeignKey("JobBranchId");

                    b.HasOne("Ravil.Domain.Models.Data.ApplicationUser", "ApplicationUser")
                        .WithMany("UserBookMarks")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ApplicationUser");
                });

            modelBuilder.Entity("Ravil.Domain.Models.Data.UserJobAction", b =>
                {
                    b.HasOne("Ravil.Domain.Models.Data.JobBranch", "JobBranch")
                        .WithMany("JobUserActions")
                        .HasForeignKey("JobBranchId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Ravil.Domain.Models.Data.ApplicationUser", "ApplicationUser")
                        .WithMany("UserJobAction")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ApplicationUser");

                    b.Navigation("JobBranch");
                });

            modelBuilder.Entity("Ravil.Domain.Models.Data.UserLikedGallery", b =>
                {
                    b.HasOne("Ravil.Domain.Models.Data.ApplicationUser", "ApplicationUser")
                        .WithMany("UserLikedGalleries")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ApplicationUser");
                });

            modelBuilder.Entity("Ravil.Domain.Models.Data.UsersFeedbackSlider", b =>
                {
                    b.HasOne("Ravil.Domain.Models.Data.JobBranch", "JobBranch")
                        .WithMany("UsersFeedbackSliders")
                        .HasForeignKey("JobBranchId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("JobBranch");
                });

            modelBuilder.Entity("Ravil.Domain.Models.Schema.Answer", b =>
                {
                    b.HasOne("Ravil.Domain.Models.Schema.Question", "Question")
                        .WithMany("Answers")
                        .HasForeignKey("QuestionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Question");
                });

            modelBuilder.Entity("Ravil.Domain.Models.Schema.Article", b =>
                {
                    b.HasOne("Ravil.Domain.Models.Data.ApplicationUser", "Author")
                        .WithMany()
                        .HasForeignKey("AuthorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Ravil.Domain.Models.Schema.Person", "Person")
                        .WithMany("Articles")
                        .HasForeignKey("PersonId");

                    b.Navigation("Author");

                    b.Navigation("Person");
                });

            modelBuilder.Entity("Ravil.Domain.Models.Schema.BrandOwner", b =>
                {
                    b.HasOne("Ravil.Domain.Models.Schema.Person", "Person")
                        .WithMany("Brands")
                        .HasForeignKey("OwnerBrandId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Person");
                });

            modelBuilder.Entity("Ravil.Domain.Models.Schema.DayOfWeeks", b =>
                {
                    b.HasOne("Ravil.Domain.Models.Schema.TimeClose", "TimeClose")
                        .WithMany("DayOfWeeks")
                        .HasForeignKey("TimeCloseId");

                    b.HasOne("Ravil.Domain.Models.Schema.TimeOpens", "TimeOpen")
                        .WithMany("DayOfWeeks")
                        .HasForeignKey("TimeOpenId");

                    b.HasOne("Ravil.Domain.Models.Schema.TimeWorks", "TimeWork")
                        .WithMany("DayOfWeeks")
                        .HasForeignKey("TimeWorkId");

                    b.Navigation("TimeClose");

                    b.Navigation("TimeOpen");

                    b.Navigation("TimeWork");
                });

            modelBuilder.Entity("Ravil.Domain.Models.Schema.ReviewItem", b =>
                {
                    b.HasOne("Ravil.Domain.Models.Schema.Person", "Person")
                        .WithMany("ReviewItems")
                        .HasForeignKey("AuthorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Person");
                });

            modelBuilder.Entity("Ravil.Domain.Models.Schema.TimeClose", b =>
                {
                    b.HasOne("Ravil.Domain.Models.Schema.TimeWorks", null)
                        .WithMany("TimeCloses")
                        .HasForeignKey("TimeWorksId");
                });

            modelBuilder.Entity("Ravil.Domain.Models.Schema.TimeOpens", b =>
                {
                    b.HasOne("Ravil.Domain.Models.Schema.TimeWorks", null)
                        .WithMany("TimeOpens")
                        .HasForeignKey("TimeWorksId");
                });

            modelBuilder.Entity("Ravil.Domain.Models.Data.Account", b =>
                {
                    b.Navigation("AccountAttrs");

                    b.Navigation("Orders");
                });

            modelBuilder.Entity("Ravil.Domain.Models.Data.AccountCategory", b =>
                {
                    b.Navigation("Accounts");
                });

            modelBuilder.Entity("Ravil.Domain.Models.Data.AccountLevel", b =>
                {
                    b.Navigation("Accounts");
                });

            modelBuilder.Entity("Ravil.Domain.Models.Data.ApplicationUser", b =>
                {
                    b.Navigation("Comments");

                    b.Navigation("JobBranches");

                    b.Navigation("Orders");

                    b.Navigation("Transactions");

                    b.Navigation("UserAddresses");

                    b.Navigation("UserBannerClicks");

                    b.Navigation("UserBannerViews");

                    b.Navigation("UserBlogActions");

                    b.Navigation("UserBookMarks");

                    b.Navigation("UserJobAction");

                    b.Navigation("UserLikedGalleries");
                });

            modelBuilder.Entity("Ravil.Domain.Models.Data.Attr", b =>
                {
                    b.Navigation("AttrJobBranches");

                    b.Navigation("AttrValues");
                });

            modelBuilder.Entity("Ravil.Domain.Models.Data.AttrAccount", b =>
                {
                    b.Navigation("AttrAccounts");

                    b.Navigation("AttrAccountValues");
                });

            modelBuilder.Entity("Ravil.Domain.Models.Data.AttrAccountValue", b =>
                {
                    b.Navigation("AccountAttrs");
                });

            modelBuilder.Entity("Ravil.Domain.Models.Data.AttrCategory", b =>
                {
                    b.Navigation("AttributeAccounts");

                    b.Navigation("Attributes");
                });

            modelBuilder.Entity("Ravil.Domain.Models.Data.AttrValue", b =>
                {
                    b.Navigation("JobBranchAttrs");
                });

            modelBuilder.Entity("Ravil.Domain.Models.Data.Banner", b =>
                {
                    b.Navigation("UserBannerClicks");

                    b.Navigation("UserBannerViews");
                });

            modelBuilder.Entity("Ravil.Domain.Models.Data.Blog", b =>
                {
                    b.Navigation("BlogCategoryRels");

                    b.Navigation("BlogComments");

                    b.Navigation("BlogTags");

                    b.Navigation("BlogUserActions");

                    b.Navigation("BlogUserLikes");
                });

            modelBuilder.Entity("Ravil.Domain.Models.Data.BlogCategory", b =>
                {
                    b.Navigation("BlogCategoryRels");
                });

            modelBuilder.Entity("Ravil.Domain.Models.Data.Brand", b =>
                {
                    b.Navigation("Jobs");
                });

            modelBuilder.Entity("Ravil.Domain.Models.Data.Category", b =>
                {
                    b.Navigation("Attributes");

                    b.Navigation("CategoryServices");

                    b.Navigation("CityCategories");

                    b.Navigation("JobCategories");
                });

            modelBuilder.Entity("Ravil.Domain.Models.Data.City", b =>
                {
                    b.Navigation("CityCategories");
                });

            modelBuilder.Entity("Ravil.Domain.Models.Data.CityBase", b =>
                {
                    b.Navigation("Addresses");

                    b.Navigation("ApplicationUsers");

                    b.Navigation("City");

                    b.Navigation("MainSliders");

                    b.Navigation("UserAddresses");
                });

            modelBuilder.Entity("Ravil.Domain.Models.Data.Comment", b =>
                {
                    b.Navigation("AnswerComments");
                });

            modelBuilder.Entity("Ravil.Domain.Models.Data.DayOfWeek", b =>
                {
                    b.Navigation("JobTimeWorks");
                });

            modelBuilder.Entity("Ravil.Domain.Models.Data.FaqCategory", b =>
                {
                    b.Navigation("Faqs");
                });

            modelBuilder.Entity("Ravil.Domain.Models.Data.Job", b =>
                {
                    b.Navigation("JobBranches");

                    b.Navigation("JobCategories");

                    b.Navigation("JobTags");
                });

            modelBuilder.Entity("Ravil.Domain.Models.Data.JobBranch", b =>
                {
                    b.Navigation("Address");

                    b.Navigation("Banners");

                    b.Navigation("Comments");

                    b.Navigation("JobBranchAttributes");

                    b.Navigation("JobBranchGalleries");

                    b.Navigation("JobBranchShortLinks");

                    b.Navigation("JobBranchTags");

                    b.Navigation("JobServices");

                    b.Navigation("JobTimeWorks");

                    b.Navigation("JobUserActions");

                    b.Navigation("JobUserBookMarks");

                    b.Navigation("MainSliders");

                    b.Navigation("Orders");

                    b.Navigation("UsersFeedbackSliders");
                });

            modelBuilder.Entity("Ravil.Domain.Models.Data.Location", b =>
                {
                    b.Navigation("Address");
                });

            modelBuilder.Entity("Ravil.Domain.Models.Data.Order", b =>
                {
                    b.Navigation("Transactions");
                });

            modelBuilder.Entity("Ravil.Domain.Models.Data.PromotionCode", b =>
                {
                    b.Navigation("Orders");
                });

            modelBuilder.Entity("Ravil.Domain.Models.Data.Service", b =>
                {
                    b.Navigation("CategoryServices");

                    b.Navigation("JobServices");
                });

            modelBuilder.Entity("Ravil.Domain.Models.Data.State", b =>
                {
                    b.Navigation("ApplicationUsers");
                });

            modelBuilder.Entity("Ravil.Domain.Models.Data.StateBase", b =>
                {
                    b.Navigation("Addresses");

                    b.Navigation("ApplicationUsers");

                    b.Navigation("MainSliders");

                    b.Navigation("State");

                    b.Navigation("UserAddresses");
                });

            modelBuilder.Entity("Ravil.Domain.Models.Data.Tag", b =>
                {
                    b.Navigation("BlogTags");

                    b.Navigation("JobBranchTags");

                    b.Navigation("JobTags");
                });

            modelBuilder.Entity("Ravil.Domain.Models.Schema.Person", b =>
                {
                    b.Navigation("Articles");

                    b.Navigation("Brands");

                    b.Navigation("ReviewItems");
                });

            modelBuilder.Entity("Ravil.Domain.Models.Schema.Question", b =>
                {
                    b.Navigation("Answers");
                });

            modelBuilder.Entity("Ravil.Domain.Models.Schema.TimeClose", b =>
                {
                    b.Navigation("DayOfWeeks");
                });

            modelBuilder.Entity("Ravil.Domain.Models.Schema.TimeOpens", b =>
                {
                    b.Navigation("DayOfWeeks");
                });

            modelBuilder.Entity("Ravil.Domain.Models.Schema.TimeWorks", b =>
                {
                    b.Navigation("DayOfWeeks");

                    b.Navigation("TimeCloses");

                    b.Navigation("TimeOpens");
                });
#pragma warning restore 612, 618
        }
    }
}
