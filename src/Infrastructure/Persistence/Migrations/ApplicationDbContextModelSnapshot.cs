// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Persistence.Context;

#nullable disable

namespace Persistence.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    partial class ApplicationDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasDefaultSchema("dbo")
                .HasAnnotation("ProductVersion", "8.0.10")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Domain.Entities.Address.Address", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("CityId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("JobBranchId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LocationId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Neighbourhood")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("OtherAddress")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PostalAddress")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PostalCode")
                        .HasMaxLength(15)
                        .HasColumnType("nvarchar(15)");

                    b.Property<int>("StateId")
                        .HasColumnType("int");

                    b.Property<DateTime>("UpdateDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValue(new DateTime(2025, 4, 28, 9, 57, 53, 138, DateTimeKind.Local).AddTicks(2742));

                    b.HasKey("Id");

                    b.HasIndex("CityId");

                    b.HasIndex("JobBranchId")
                        .IsUnique();

                    b.HasIndex("LocationId")
                        .IsUnique()
                        .HasFilter("[LocationId] IS NOT NULL");

                    b.HasIndex("StateId");

                    b.ToTable("Address", "Address");
                });

            modelBuilder.Entity("Domain.Entities.Banner.Banner", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("BannerPictureType")
                        .HasColumnType("int");

                    b.Property<int>("BannerType")
                        .HasColumnType("int");

                    b.Property<int>("ClickCount")
                        .HasColumnType("int");

                    b.Property<DateTime?>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasMaxLength(800)
                        .HasColumnType("nvarchar(800)");

                    b.Property<DateTime?>("ExpireDate")
                        .IsRequired()
                        .HasColumnType("datetime2");

                    b.Property<int?>("ExpireDay")
                        .HasColumnType("int");

                    b.Property<bool?>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("JobBranchId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LargePicture")
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.Property<DateTime?>("LastDeleteBicycleDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("LastDeletePermanentDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("LastUpdateDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("LinkPage")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SmallPicture")
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.Property<byte>("Sort")
                        .HasColumnType("tinyint");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(350)
                        .HasColumnType("nvarchar(350)");

                    b.Property<int>("ViewCount")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("JobBranchId");

                    b.ToTable("Banner", "Shared");
                });

            modelBuilder.Entity("Domain.Entities.Blog.Blog", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("AuthorName")
                        .IsRequired()
                        .HasMaxLength(350)
                        .HasColumnType("nvarchar(350)");

                    b.Property<bool>("CanonicalMeta")
                        .HasColumnType("bit");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasMaxLength(8000)
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IndexMeta")
                        .HasColumnType("bit");

                    b.Property<bool?>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<bool>("IsResizePicture")
                        .HasColumnType("bit");

                    b.Property<string>("LargePicture")
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.Property<DateTime?>("LastDeleteBicycleDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("LastDeletePermanentDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("LastUpdateDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("MetaCanonicalUrl")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("MetaDesc")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("MetaTitle")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<short>("ReadingTime")
                        .HasColumnType("smallint");

                    b.Property<string>("Route")
                        .IsRequired()
                        .HasMaxLength(300)
                        .HasColumnType("nvarchar(300)");

                    b.Property<string>("SmallPicture")
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.Property<string>("SubTitle")
                        .IsRequired()
                        .HasMaxLength(350)
                        .HasColumnType("nvarchar(350)");

                    b.Property<string>("Summary")
                        .IsRequired()
                        .HasMaxLength(800)
                        .HasColumnType("nvarchar(800)");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(350)
                        .HasColumnType("nvarchar(350)");

                    b.Property<string>("TitleListContent")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ViewCount")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("Blog", "Blog");
                });

            modelBuilder.Entity("Domain.Entities.Blog.BlogCategory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime?>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<bool?>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("LastDeleteBicycleDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("LastDeletePermanentDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("LastUpdateDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("ParentId")
                        .HasColumnType("int");

                    b.Property<byte>("Sort")
                        .HasColumnType("tinyint");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(350)
                        .HasColumnType("nvarchar(350)");

                    b.HasKey("Id");

                    b.ToTable("BlogCategory", "Blog");
                });

            modelBuilder.Entity("Domain.Entities.Blog.BlogCategoryRel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("BlogCategoryId")
                        .HasColumnType("int");

                    b.Property<int>("BlogId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<bool?>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("LastDeleteBicycleDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("LastDeletePermanentDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("LastUpdateDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("BlogCategoryId");

                    b.HasIndex("BlogId");

                    b.ToTable("BlogCategoryRel", "Blog");
                });

            modelBuilder.Entity("Domain.Entities.Blog.BlogTag", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("BlogId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<bool?>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("LastDeleteBicycleDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("LastDeletePermanentDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("LastUpdateDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("TagId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("BlogId");

                    b.HasIndex("TagId");

                    b.ToTable("BlogTag", "Blog");
                });

            modelBuilder.Entity("Domain.Entities.Brand.Brand", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("AlternateTitle")
                        .HasMaxLength(350)
                        .HasColumnType("nvarchar(350)");

                    b.Property<DateTime?>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Introduction")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool?>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("LastDeleteBicycleDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("LastDeletePermanentDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("LastUpdateDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Picture")
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.Property<string>("SearchLink")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("Status")
                        .HasColumnType("bit");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(350)
                        .HasColumnType("nvarchar(350)");

                    b.HasKey("Id");

                    b.ToTable("Brand", "Shared");
                });

            modelBuilder.Entity("Domain.Entities.Category.CategoriesCityContent", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("CategoryId")
                        .HasColumnType("int");

                    b.Property<string>("CategoryName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("CityId")
                        .HasColumnType("int");

                    b.Property<string>("CityName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("CategoriesCityContent", "Job");
                });

            modelBuilder.Entity("Domain.Entities.Category.Category", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<bool>("CanonicalMeta")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("HasAttribute")
                        .HasColumnType("bit");

                    b.Property<string>("HeadingTitle")
                        .HasMaxLength(350)
                        .HasColumnType("nvarchar(350)");

                    b.Property<string>("IconPicture")
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.Property<bool>("IndexMeta")
                        .HasColumnType("bit");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool?>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<bool>("IsLastNode")
                        .HasColumnType("bit");

                    b.Property<bool>("IsResizePicture")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("LastDeleteBicycleDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("LastDeletePermanentDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("LastUpdateDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("MetaCanonicalUrl")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("MetaDesc")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("MetaTitle")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(350)
                        .HasColumnType("nvarchar(350)");

                    b.Property<short>("NodeLevel")
                        .HasColumnType("smallint");

                    b.Property<string>("PageContent")
                        .HasMaxLength(8000)
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ParentId")
                        .HasColumnType("int");

                    b.Property<string>("Picture")
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.Property<string>("Route")
                        .IsRequired()
                        .HasMaxLength(300)
                        .HasColumnType("nvarchar(300)");

                    b.Property<int>("Sort")
                        .HasColumnType("int");

                    b.Property<int>("Type")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(1);

                    b.Property<int>("ViewCount")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("Category", "Category");
                });

            modelBuilder.Entity("Domain.Entities.Category.CategoryService", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("CategoryId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<bool?>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("LastDeleteBicycleDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("LastDeletePermanentDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("LastUpdateDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("ServiceId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CategoryId");

                    b.HasIndex("ServiceId");

                    b.ToTable("CategoryService", "Category");
                });

            modelBuilder.Entity("Domain.Entities.Category.CategoryTag", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("CategoryId")
                        .HasColumnType("int");

                    b.Property<int>("TagId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CategoryId");

                    b.HasIndex("TagId");

                    b.ToTable("CategoryTag", "Category");
                });

            modelBuilder.Entity("Domain.Entities.Category.RelatedCategorySeo", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("CurrentCityId")
                        .HasColumnType("int");

                    b.Property<string>("CurrentCityName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DisplayedCityName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("Link")
                        .HasColumnType("bit");

                    b.Property<int>("Sort")
                        .HasColumnType("int");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("RelatedCategorySeo", "Job");
                });

            modelBuilder.Entity("Domain.Entities.Category.Target", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("DestinationCategoryId")
                        .HasColumnType("int");

                    b.Property<string>("DestinationCategoryName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("OriginCategoryId")
                        .HasColumnType("int");

                    b.Property<string>("OriginCategoryName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Target", "Job");
                });

            modelBuilder.Entity("Domain.Entities.City.City", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<bool>("CanonicalMeta")
                        .HasColumnType("bit");

                    b.Property<int>("CityBaseId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IndexMeta")
                        .HasColumnType("bit");

                    b.Property<bool?>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<bool>("IsResizePicture")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("LastDeleteBicycleDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("LastDeletePermanentDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("LastUpdateDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("MetaCanonicalUrl")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("MetaDesc")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("MetaTitle")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("Picture")
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.Property<string>("Route")
                        .HasMaxLength(300)
                        .HasColumnType("nvarchar(300)");

                    b.Property<bool>("Status")
                        .HasColumnType("bit");

                    b.Property<string>("Subtitle")
                        .IsRequired()
                        .HasMaxLength(350)
                        .HasColumnType("nvarchar(350)");

                    b.HasKey("Id");

                    b.HasIndex("CityBaseId")
                        .IsUnique();

                    b.ToTable("City", "City");
                });

            modelBuilder.Entity("Domain.Entities.City.CityBase", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("CountyId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<bool?>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("LastDeleteBicycleDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("LastDeletePermanentDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("LastUpdateDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(350)
                        .HasColumnType("nvarchar(350)");

                    b.Property<int?>("StateBaseId")
                        .HasColumnType("int");

                    b.Property<int>("StateId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("StateBaseId")
                        .IsUnique()
                        .HasFilter("[StateBaseId] IS NOT NULL");

                    b.ToTable("CityBase", "City");
                });

            modelBuilder.Entity("Domain.Entities.City.CityCategory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("CategoryId")
                        .HasColumnType("int");

                    b.Property<int>("CityId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<bool?>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("LastDeleteBicycleDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("LastDeletePermanentDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("LastUpdateDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("CategoryId");

                    b.HasIndex("CityId");

                    b.ToTable("CityCategory", "City");
                });

            modelBuilder.Entity("Domain.Entities.Comment.AnswerComment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("AdminId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("AnswerCommentDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("AnswerCommentText")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("AnswerCommentTitle")
                        .HasMaxLength(350)
                        .HasColumnType("nvarchar(350)");

                    b.Property<string>("Avatar")
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.Property<int>("CommentId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FullName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsAdminAnswer")
                        .HasColumnType("bit");

                    b.Property<bool>("IsConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool?>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("LastDeleteBicycleDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("LastDeletePermanentDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("LastUpdateDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Phone")
                        .HasMaxLength(11)
                        .HasColumnType("nvarchar(11)");

                    b.Property<DateTime?>("ReviewDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserIp")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("CommentId");

                    b.ToTable("AnswerComment", "Comment");
                });

            modelBuilder.Entity("Domain.Entities.Comment.Comment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Avatar")
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.Property<int?>("BlogId")
                        .HasColumnType("int");

                    b.Property<string>("CommentText")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<int>("CommentType")
                        .HasColumnType("int");

                    b.Property<DateTime?>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FullName")
                        .IsRequired()
                        .HasMaxLength(350)
                        .HasColumnType("nvarchar(350)");

                    b.Property<bool>("IsConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool?>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("JobBranchId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime?>("LastDeleteBicycleDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("LastDeletePermanentDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("LastUpdateDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Phone")
                        .IsRequired()
                        .HasMaxLength(11)
                        .HasColumnType("nvarchar(11)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("UserIp")
                        .HasMaxLength(15)
                        .HasColumnType("nvarchar(15)");

                    b.HasKey("Id");

                    b.HasIndex("BlogId");

                    b.HasIndex("JobBranchId");

                    b.HasIndex("UserId");

                    b.ToTable("Comment", "Comment");
                });

            modelBuilder.Entity("Domain.Entities.Config.Config", b =>
                {
                    b.Property<int?>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int?>("Id"));

                    b.Property<string>("AboutUsContent")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("AboutUsMetaDesc")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("AboutUsTitle")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("AboutUsVideo")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("ActiveBaseCityId")
                        .HasColumnType("int");

                    b.Property<string>("Address")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("BlogMetaDesc")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("BlogTitle")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CategoriesBrandNameMetaDescriptionPattern")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CategoriesHeadingTitlePattern")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CategoriesMetaTitlePattern")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CategoriesPersonalBrandMetaDescriptionPattern")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CommentRules")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ConfirmationPatternCode")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ContactContent")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ContactMetaDesc")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ContactTitle")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ContentDeliveryNetwork")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CurrenciesAccepted")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("DefaultFaqCategory")
                        .HasColumnType("int");

                    b.Property<string>("Domain")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<int>("ExternalLoginState")
                        .HasColumnType("int");

                    b.Property<string>("Facebook")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FaqContent")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FaqMetaDesc")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FaqPicture")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FaqTitle")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FooterText")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("FoundingDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("FreeAddContent")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FreeAddIconPicture")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FreeAddMetaDesc")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FreeAddPicture")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FreeAddTitle")
                        .HasColumnType("nvarchar(max)");

                    b.Property<double>("FreeShippingLimit")
                        .HasColumnType("float");

                    b.Property<string>("Google")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("HomeActiveSliderCategoryId")
                        .HasColumnType("int");

                    b.Property<string>("HomeDescription")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("HomeMainExtFileName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("HomeMainPicture")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("HomeMetaDesc")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("HomeSummery")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("HomeTitle")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Instagram")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsMultipleCreate")
                        .HasColumnType("bit");

                    b.Property<string>("JobsBrandNameMetaDescriptionPattern")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("JobsBrandNameMetaTitlePattern")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("JobsPersonalBrandMetaDescriptionPattern")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("JobsPersonalBrandMetaTitlePattern")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("MailDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("MailPassword")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("MailSmtpDomain")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("MailUserName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("MapUrl")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Mobile")
                        .HasMaxLength(11)
                        .HasColumnType("nvarchar(11)");

                    b.Property<bool>("MobileSupportButtonIsShow")
                        .HasColumnType("bit");

                    b.Property<bool>("NoIndexSeoPages")
                        .HasColumnType("bit");

                    b.Property<string>("OrderNotificationPhoneNumber")
                        .HasMaxLength(11)
                        .HasColumnType("nvarchar(11)");

                    b.Property<int>("OrderNumber")
                        .HasColumnType("int");

                    b.Property<string>("PaymentAccepted")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PriceRange")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PricingAccountDescription")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PricingContent")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PricingIconPicture")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PricingMetaDesc")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PricingPicture")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PricingTitle")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("RedirectSeoPages")
                        .HasColumnType("bit");

                    b.Property<string>("ResetPasswordPatternCode")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("SendNotificationState")
                        .HasColumnType("int");

                    b.Property<double>("ShippingPrice")
                        .HasColumnType("float");

                    b.Property<string>("ShippingTimeRange")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SiteAlternateName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SiteName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SmsCenter")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SmsPass")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SmsUser")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SupportBoxDesc")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SupportBoxTitle")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Tel")
                        .HasMaxLength(11)
                        .HasColumnType("nvarchar(11)");

                    b.Property<string>("Telegram")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Twitter")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("UseSliderOrVideoInHome")
                        .HasColumnType("bit");

                    b.Property<string>("Whatsapp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ZarinpalMerchant")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("ZarinpalMode")
                        .HasColumnType("bit");

                    b.Property<string>("ZarinpalUrl")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Config", "Shared");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            ActiveBaseCityId = 245,
                            Domain = "https://localhost:5001",
                            ExternalLoginState = 1,
                            FoundingDate = new DateTime(2021, 9, 11, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            FreeShippingLimit = 200000.0,
                            HomeActiveSliderCategoryId = 1,
                            IsMultipleCreate = false,
                            MobileSupportButtonIsShow = false,
                            NoIndexSeoPages = false,
                            OrderNumber = 10000,
                            RedirectSeoPages = false,
                            SendNotificationState = 0,
                            ShippingPrice = 25000.0,
                            SiteAlternateName = "ravil",
                            SiteName = "راویل",
                            UseSliderOrVideoInHome = false,
                            ZarinpalMode = false
                        });
                });

            modelBuilder.Entity("Domain.Entities.ContactUs.ContactUs", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("AdminId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("AdminName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Answer")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("AnswerDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<string>("FullName")
                        .IsRequired()
                        .HasMaxLength(350)
                        .HasColumnType("nvarchar(350)");

                    b.Property<bool?>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<bool>("IsReadByAdmin")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("LastDeleteBicycleDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("LastDeletePermanentDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("LastUpdateDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Message")
                        .IsRequired()
                        .HasMaxLength(4000)
                        .HasColumnType("nvarchar(4000)");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasMaxLength(11)
                        .HasColumnType("nvarchar(11)");

                    b.Property<bool>("StatusAnswer")
                        .HasColumnType("bit");

                    b.Property<string>("Subject")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserIp")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("ContactUs", "Contact");
                });

            modelBuilder.Entity("Domain.Entities.DayOfWeek.DayOfWeek", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("AlternateName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsSelectedPersianName")
                        .HasColumnType("bit");

                    b.Property<string>("PersianName")
                        .IsRequired()
                        .HasMaxLength(350)
                        .HasColumnType("nvarchar(350)");

                    b.Property<byte>("Sort")
                        .HasColumnType("tinyint");

                    b.HasKey("Id");

                    b.ToTable("DayOfWeek", "Schema");
                });

            modelBuilder.Entity("Domain.Entities.Faq.Faq", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Answer")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("CategoryId")
                        .HasColumnType("int");

                    b.Property<string>("IconPicture")
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.Property<string>("Question")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Sort")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CategoryId");

                    b.ToTable("Faq", "Faq");
                });

            modelBuilder.Entity("Domain.Entities.Faq.FaqCategory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("ParentId")
                        .HasColumnType("int");

                    b.Property<byte>("Sort")
                        .HasColumnType("tinyint");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(350)
                        .HasColumnType("nvarchar(350)");

                    b.HasKey("Id");

                    b.ToTable("FaqCategory", "Faq");
                });

            modelBuilder.Entity("Domain.Entities.Faq.FaqJobCategory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("FaqId")
                        .HasColumnType("int");

                    b.Property<int>("JobCategoryId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("FaqId");

                    b.HasIndex("JobCategoryId");

                    b.ToTable("FaqJobCategory", "Faq");
                });

            modelBuilder.Entity("Domain.Entities.FeedbackSlider.FeedbackSlider", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("CategoryId")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(800)
                        .HasColumnType("nvarchar(800)");

                    b.Property<string>("Picture")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.Property<byte>("Sort")
                        .HasColumnType("tinyint");

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("UserRole")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.HasKey("Id");

                    b.ToTable("FeedbackSlider", "Shared");
                });

            modelBuilder.Entity("Domain.Entities.Histories.ActionHistories", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ActionType")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("AddressIp")
                        .IsRequired()
                        .HasMaxLength(15)
                        .HasColumnType("nvarchar(15)");

                    b.Property<int>("CategoryId")
                        .HasColumnType("int");

                    b.Property<string>("CategoryName")
                        .IsRequired()
                        .HasMaxLength(350)
                        .HasColumnType("nvarchar(350)");

                    b.Property<string>("FullName")
                        .HasMaxLength(350)
                        .HasColumnType("nvarchar(350)");

                    b.Property<string>("JobId")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("JobTitle")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Location")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<DateTime>("Time")
                        .HasColumnType("datetime2");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("ActionHistories", "Shared");
                });

            modelBuilder.Entity("Domain.Entities.Histories.JobCategoriesView", b =>
                {
                    b.Property<string>("BranchTitle")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Category")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("CategoryId")
                        .HasColumnType("int");

                    b.Property<string>("City")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("JobId")
                        .HasColumnType("int");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.ToTable((string)null);

                    b.ToView("JobCategoriesView", "dbo");
                });

            modelBuilder.Entity("Domain.Entities.Job.Job", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("AdminId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("AdminName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("AverageRate")
                        .HasColumnType("int");

                    b.Property<string>("Content")
                        .HasMaxLength(8000)
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<bool?>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<bool>("IsGoogleData")
                        .HasColumnType("bit");

                    b.Property<bool>("IsResizePicture")
                        .HasColumnType("bit");

                    b.Property<int?>("JobBrandId")
                        .HasColumnType("int");

                    b.Property<string>("LargePicture")
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.Property<DateTime?>("LastDeleteBicycleDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("LastDeletePermanentDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("LastUpdateDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("PhoneNumberInfos")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RejectedReason")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Route")
                        .HasMaxLength(300)
                        .HasColumnType("nvarchar(300)");

                    b.Property<bool?>("ShowFirstPhoneMobileInSite")
                        .HasColumnType("bit");

                    b.Property<bool?>("ShowPhoneTelInSite")
                        .HasColumnType("bit");

                    b.Property<string>("SmallPicture")
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.Property<string>("SocialMediaInfos")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("Status")
                        .HasColumnType("int");

                    b.Property<string>("SubTitle")
                        .HasMaxLength(350)
                        .HasColumnType("nvarchar(350)");

                    b.Property<string>("Summary")
                        .HasMaxLength(800)
                        .HasColumnType("nvarchar(800)");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(350)
                        .HasColumnType("nvarchar(350)");

                    b.Property<int>("ViewCountTotal")
                        .HasColumnType("int");

                    b.Property<string>("WebSiteName")
                        .HasMaxLength(350)
                        .HasColumnType("nvarchar(350)");

                    b.HasKey("Id");

                    b.HasIndex("JobBrandId");

                    b.ToTable("Job", "Job");
                });

            modelBuilder.Entity("Domain.Entities.Job.JobBranch", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("AddressId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("AdminId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("AdminName")
                        .HasMaxLength(350)
                        .HasColumnType("nvarchar(350)");

                    b.Property<int>("AverageRate")
                        .HasColumnType("int");

                    b.Property<string>("BranchContent")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("BranchVideo")
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.Property<bool>("CanonicalMeta")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("ConfirmationDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasMaxLength(800)
                        .HasColumnType("nvarchar(800)");

                    b.Property<string>("HeadingTitle")
                        .HasMaxLength(350)
                        .HasColumnType("nvarchar(350)");

                    b.Property<bool>("IndexMeta")
                        .HasColumnType("bit");

                    b.Property<bool>("IsAdminCreator")
                        .HasColumnType("bit");

                    b.Property<bool>("IsConfirmedByAdmin")
                        .HasColumnType("bit");

                    b.Property<bool?>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<bool>("IsOffer")
                        .HasColumnType("bit");

                    b.Property<bool>("IsResizePicture")
                        .HasColumnType("bit");

                    b.Property<int>("JobId")
                        .HasColumnType("int");

                    b.Property<int>("JobTimeWorkType")
                        .HasColumnType("int");

                    b.Property<string>("LargePicture")
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.Property<DateTime?>("LastDeleteBicycleDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("LastDeletePermanentDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("LastUpdateDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("MapUrl")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("MetaCanonicalUrl")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("MetaDesc")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("MetaTitle")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("RejectedReason")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Route")
                        .HasMaxLength(300)
                        .HasColumnType("nvarchar(300)");

                    b.Property<string>("SmallPicture")
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.Property<int?>("Status")
                        .HasColumnType("int");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(350)
                        .HasColumnType("nvarchar(350)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("ViewCount")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("JobId");

                    b.HasIndex("UserId");

                    b.ToTable("JobBranch", "Job");
                });

            modelBuilder.Entity("Domain.Entities.Job.JobBranchAds", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("CategoryId")
                        .HasColumnType("int");

                    b.Property<string>("CategoryName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("JobBranchId")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("JobBranchName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("Pinned")
                        .HasColumnType("bit");

                    b.Property<int>("Sort")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("JobBranchAds", "Job");
                });

            modelBuilder.Entity("Domain.Entities.Job.JobBranchGallery", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ImageName")
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.Property<string>("JobBranchId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<byte>("Sort")
                        .HasMaxLength(150)
                        .HasColumnType("tinyint");

                    b.HasKey("Id");

                    b.HasIndex("JobBranchId");

                    b.ToTable("JobBranchGallery", "Job");
                });

            modelBuilder.Entity("Domain.Entities.Job.JobBranchRelatedJob", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("CurrentCityId")
                        .HasColumnType("int");

                    b.Property<string>("CurrentCityName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("DisplayedCityId")
                        .HasColumnType("int");

                    b.Property<string>("DisplayedCityName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Sort")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("JobBranchRelatedJob", "Job");
                });

            modelBuilder.Entity("Domain.Entities.Job.JobBranchShortLink", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("JobBranchId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ShortKey")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Type")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("JobBranchId");

                    b.ToTable("JobBranchShortLink", "Job");
                });

            modelBuilder.Entity("Domain.Entities.Job.JobBranchTag", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("JobBranchId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("TagId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("JobBranchId");

                    b.HasIndex("TagId");

                    b.ToTable("JobBranchTag", "Job");
                });

            modelBuilder.Entity("Domain.Entities.Job.JobCategory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("CategoryId")
                        .HasColumnType("int");

                    b.Property<int>("JobId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CategoryId");

                    b.HasIndex("JobId");

                    b.ToTable("JobCategory", "dbo");
                });

            modelBuilder.Entity("Domain.Entities.Job.JobInfo", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<double>("AverageClickOnCall")
                        .HasColumnType("float");

                    b.Property<int>("ClickOnCall")
                        .HasColumnType("int");

                    b.Property<int>("ClickOnCard")
                        .HasColumnType("int");

                    b.Property<int>("ClickOnChat")
                        .HasColumnType("int");

                    b.Property<int>("ClickOnImages")
                        .HasColumnType("int");

                    b.Property<int>("ClickOnMap")
                        .HasColumnType("int");

                    b.Property<int>("ClickOnWebSite")
                        .HasColumnType("int");

                    b.Property<int>("JobId")
                        .HasColumnType("int");

                    b.Property<int>("Visit")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("JobId")
                        .IsUnique();

                    b.ToTable("JobInfo", "Job");
                });

            modelBuilder.Entity("Domain.Entities.Job.JobKeyword", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<int>("CostPerClick")
                        .HasColumnType("int");

                    b.Property<string>("JobBranchId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<Guid>("KeywordId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("JobBranchId");

                    b.HasIndex("KeywordId");

                    b.ToTable("JobKeyword", "Job");
                });

            modelBuilder.Entity("Domain.Entities.Job.JobRanking", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<double>("AveragePosition")
                        .HasColumnType("float");

                    b.Property<int>("ClickCount")
                        .HasColumnType("int");

                    b.Property<int>("JobId")
                        .HasColumnType("int");

                    b.Property<string>("PageUrl")
                        .IsRequired()
                        .HasMaxLength(300)
                        .HasColumnType("nvarchar(300)");

                    b.HasKey("Id");

                    b.HasIndex("JobId")
                        .IsUnique();

                    b.ToTable("JobRanking", "Job");
                });

            modelBuilder.Entity("Domain.Entities.Job.JobSelectionSlider", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("JobBranchId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("JobId")
                        .HasColumnType("int");

                    b.Property<int>("JobSliderType")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("JobBranchId");

                    b.ToTable("JobSelectionSlider", "Job");
                });

            modelBuilder.Entity("Domain.Entities.Job.JobService", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("JobBranchId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("ServiceId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("JobBranchId");

                    b.HasIndex("ServiceId");

                    b.ToTable("JobService", "Job");
                });

            modelBuilder.Entity("Domain.Entities.Job.JobTag", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("JobId")
                        .HasColumnType("int");

                    b.Property<int>("TagId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("JobId");

                    b.HasIndex("TagId");

                    b.ToTable("JobTag", "Job");
                });

            modelBuilder.Entity("Domain.Entities.Job.JobTimeWork", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("DayOfWeekId")
                        .HasColumnType("int");

                    b.Property<string>("EndTime")
                        .IsRequired()
                        .HasMaxLength(350)
                        .HasColumnType("nvarchar(350)");

                    b.Property<string>("JobBranchId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("StartTime")
                        .IsRequired()
                        .HasMaxLength(350)
                        .HasColumnType("nvarchar(350)");

                    b.HasKey("Id");

                    b.HasIndex("DayOfWeekId");

                    b.HasIndex("JobBranchId");

                    b.ToTable("JobTimeWork", "Job");
                });

            modelBuilder.Entity("Domain.Entities.Job.Keyword", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasDefaultValueSql("NEWSEQUENTIALID()");

                    b.Property<int>("CategoryId")
                        .HasColumnType("int");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("Slug")
                        .IsRequired()
                        .HasMaxLength(300)
                        .HasColumnType("nvarchar(300)");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(350)
                        .HasColumnType("nvarchar(350)");

                    b.HasKey("Id");

                    b.HasIndex("CategoryId");

                    b.ToTable("Keyword", "Job");
                });

            modelBuilder.Entity("Domain.Entities.Location.Location", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("AddressId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<bool?>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("LastDeleteBicycleDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("LastDeletePermanentDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("LastUpdateDate")
                        .HasColumnType("datetime2");

                    b.Property<double>("Lat")
                        .HasColumnType("float");

                    b.Property<double>("Long")
                        .HasColumnType("float");

                    b.Property<int>("PlaceType")
                        .HasColumnType("int");

                    b.Property<string>("Route")
                        .HasMaxLength(300)
                        .HasColumnType("nvarchar(300)");

                    b.HasKey("Id");

                    b.ToTable("Location", "Address");
                });

            modelBuilder.Entity("Domain.Entities.MainSlider.MainSlider", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("CityId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<int?>("ExpireDay")
                        .HasColumnType("int");

                    b.Property<bool?>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("JobBranchId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LargePicture")
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.Property<DateTime?>("LastDeleteBicycleDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("LastDeletePermanentDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("LastUpdateDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("LinkPage")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("SmallPicture")
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.Property<byte>("Sort")
                        .HasColumnType("tinyint");

                    b.Property<int>("StateId")
                        .HasColumnType("int");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(350)
                        .HasColumnType("nvarchar(350)");

                    b.HasKey("Id");

                    b.HasIndex("CityId");

                    b.HasIndex("JobBranchId");

                    b.HasIndex("StateId");

                    b.ToTable("MainSlider", "Shared");
                });

            modelBuilder.Entity("Domain.Entities.MessageBox.MessageBox", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime?>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool?>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<bool>("IsRead")
                        .HasColumnType("bit");

                    b.Property<int>("JobId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("LastDeleteBicycleDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("LastDeletePermanentDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("LastUpdateDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("Type")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("JobId");

                    b.ToTable("MessageBox", "Shared");
                });

            modelBuilder.Entity("Domain.Entities.PanelTutorial.PanelTutorial", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("CoverName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Sort")
                        .HasColumnType("int");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(350)
                        .HasColumnType("nvarchar(350)");

                    b.Property<string>("VideoName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("PanelTutorial", "Shared");
                });

            modelBuilder.Entity("Domain.Entities.Payment.Payment", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasDefaultValueSql("NEWSEQUENTIALID()");

                    b.Property<double>("Amount")
                        .HasColumnType("float");

                    b.Property<DateTime>("PaymentDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("PaymentMethod")
                        .HasColumnType("int");

                    b.Property<int>("PaymentPortalId")
                        .HasColumnType("int");

                    b.Property<int?>("PromotionCodeId")
                        .HasColumnType("int");

                    b.Property<int>("UserSubscriptionId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("PaymentPortalId");

                    b.HasIndex("PromotionCodeId");

                    b.HasIndex("UserSubscriptionId");

                    b.ToTable("Payment", "Payment");
                });

            modelBuilder.Entity("Domain.Entities.Payment.PaymentPortal", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("PictureName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("PaymentPortal", "Payment");
                });

            modelBuilder.Entity("Domain.Entities.Payment.PromotionCode", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<double>("Amount")
                        .HasColumnType("float");

                    b.Property<double?>("CartMaximum")
                        .HasColumnType("float");

                    b.Property<double?>("CartMinimum")
                        .HasColumnType("float");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<DateTime?>("CreateDate")
                        .IsRequired()
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("ExpireDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsActiveForDiscounts")
                        .HasColumnType("bit");

                    b.Property<bool?>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<bool>("IsUseLimit")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("LastDeleteBicycleDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("LastDeletePermanentDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("LastUpdateDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("Status")
                        .HasColumnType("bit");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(350)
                        .HasColumnType("nvarchar(350)");

                    b.Property<int>("Type")
                        .HasColumnType("int");

                    b.Property<short?>("UseCountLimit")
                        .HasColumnType("smallint");

                    b.HasKey("Id");

                    b.ToTable("PromotionCode", "Payment");
                });

            modelBuilder.Entity("Domain.Entities.RedirectionUrl.RedirectionUrl", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("DestinationUrl")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LatestUrl")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("RedirectionType")
                        .HasColumnType("int");

                    b.Property<bool>("Status")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.ToTable("RedirectionUrl", "Shared");
                });

            modelBuilder.Entity("Domain.Entities.Service.Service", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime?>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<bool?>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("LastDeleteBicycleDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("LastDeletePermanentDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("LastUpdateDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("ParentId")
                        .HasColumnType("int");

                    b.Property<string>("ServicePicture")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ServiceSummary")
                        .IsRequired()
                        .HasMaxLength(800)
                        .HasColumnType("nvarchar(800)");

                    b.Property<string>("ServiceTitle")
                        .IsRequired()
                        .HasMaxLength(350)
                        .HasColumnType("nvarchar(350)");

                    b.Property<byte>("Sort")
                        .HasColumnType("tinyint");

                    b.HasKey("Id");

                    b.ToTable("Service", "Shared");
                });

            modelBuilder.Entity("Domain.Entities.ShortLink.ShortLink", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("ItemId")
                        .HasColumnType("int");

                    b.Property<string>("ShortKey")
                        .IsRequired()
                        .HasMaxLength(6)
                        .HasColumnType("nvarchar(6)");

                    b.Property<int>("Type")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("ShortLink", "Shared");
                });

            modelBuilder.Entity("Domain.Entities.State.State", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<bool>("CanonicalMeta")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IndexMeta")
                        .HasColumnType("bit");

                    b.Property<bool?>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<bool>("IsResizePicture")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("LastDeleteBicycleDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("LastDeletePermanentDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("LastUpdateDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("MetaCanonicalUrl")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("MetaDesc")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("MetaTitle")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<double>("Multiplier")
                        .HasColumnType("float");

                    b.Property<string>("Picture")
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.Property<int>("StateBaseId")
                        .HasColumnType("int");

                    b.Property<string>("Subtitle")
                        .IsRequired()
                        .HasMaxLength(350)
                        .HasColumnType("nvarchar(350)");

                    b.HasKey("Id");

                    b.HasIndex("StateBaseId")
                        .IsUnique();

                    b.ToTable("State", "State");
                });

            modelBuilder.Entity("Domain.Entities.State.StateBase", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<double>("Multiplier")
                        .HasColumnType("float");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(350)
                        .HasColumnType("nvarchar(350)");

                    b.HasKey("Id");

                    b.ToTable("StateBase", "State");
                });

            modelBuilder.Entity("Domain.Entities.Subscription.Click", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("CostPerClick")
                        .HasColumnType("int");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(350)
                        .HasColumnType("nvarchar(350)");

                    b.Property<int>("Type")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("Click", "Subscription");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CostPerClick = 30000,
                            Title = "کلیک روی تبلیغات",
                            Type = 0
                        },
                        new
                        {
                            Id = 2,
                            CostPerClick = 15000,
                            Title = "کلیک روی مسیریابی",
                            Type = 2
                        },
                        new
                        {
                            Id = 3,
                            CostPerClick = 20000,
                            Title = "کلیک روی تماس",
                            Type = 1
                        });
                });

            modelBuilder.Entity("Domain.Entities.Subscription.Feature", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(350)
                        .HasColumnType("nvarchar(350)");

                    b.HasKey("Id");

                    b.ToTable("Feature", "Subscription");
                });

            modelBuilder.Entity("Domain.Entities.Subscription.Subscription", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("DurationTime")
                        .HasColumnType("int");

                    b.Property<int>("DurationType")
                        .HasColumnType("int");

                    b.Property<int>("GiftCharge")
                        .HasColumnType("int");

                    b.Property<string>("Icon")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<int>("Price")
                        .HasColumnType("int");

                    b.Property<string>("SubTitle")
                        .IsRequired()
                        .HasMaxLength(350)
                        .HasColumnType("nvarchar(350)");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(350)
                        .HasColumnType("nvarchar(350)");

                    b.HasKey("Id");

                    b.ToTable("Subscription", "Subscription");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            DurationTime = 90,
                            DurationType = 1,
                            GiftCharge = 250000,
                            Icon = "empty.webp",
                            IsActive = true,
                            Price = 50000000,
                            SubTitle = "برای کسب‌وکارهای متوسط که رقیب‌های زیادی ندارند.",
                            Title = "سه ماهه استاندارد"
                        },
                        new
                        {
                            Id = 2,
                            DurationTime = 180,
                            DurationType = 2,
                            GiftCharge = 500000,
                            Icon = "empty.webp",
                            IsActive = true,
                            Price = 100000000,
                            SubTitle = "برای کسب‌وکارهای متوسط که رقیب‌های زیادی ندارند.",
                            Title = "شش ماهه استاندارد"
                        },
                        new
                        {
                            Id = 3,
                            DurationTime = 365,
                            DurationType = 3,
                            GiftCharge = 1000000,
                            Icon = "empty.webp",
                            IsActive = true,
                            Price = 200000000,
                            SubTitle = "برای کسب‌وکارهای متوسط که رقیب‌های زیادی ندارند.",
                            Title = "یک ساله استاندارد"
                        },
                        new
                        {
                            Id = 4,
                            DurationTime = 90,
                            DurationType = 1,
                            GiftCharge = 2500000,
                            Icon = "empty.webp",
                            IsActive = true,
                            Price = 500000000,
                            SubTitle = "برای کسب‌وکارهای که رقیب‌های زیادی دارند.",
                            Title = "سه ماهه حرفه ای"
                        },
                        new
                        {
                            Id = 5,
                            DurationTime = 180,
                            DurationType = 2,
                            GiftCharge = 5000000,
                            Icon = "empty.webp",
                            IsActive = true,
                            Price = 1000000000,
                            SubTitle = "برای کسب‌وکارهای که رقیب‌های زیادی دارند.",
                            Title = "شش ماهه حرفه ای"
                        },
                        new
                        {
                            Id = 6,
                            DurationTime = 365,
                            DurationType = 3,
                            GiftCharge = 10000000,
                            Icon = "empty.webp",
                            IsActive = true,
                            Price = 2000000000,
                            SubTitle = "برای کسب‌وکارهای که رقیب‌های زیادی دارند.",
                            Title = "یک ساله حرفه ای"
                        });
                });

            modelBuilder.Entity("Domain.Entities.Subscription.SubscriptionClick", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasDefaultValueSql("NEWSEQUENTIALID()");

                    b.Property<int>("ClickId")
                        .HasColumnType("int");

                    b.Property<DateTime>("ClickedTime")
                        .HasColumnType("datetime2");

                    b.Property<int>("SubscriptionId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ClickId");

                    b.HasIndex("SubscriptionId");

                    b.ToTable("SubscriptionClick", "Subscription");
                });

            modelBuilder.Entity("Domain.Entities.Subscription.SubscriptionFeature", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("FeatureId")
                        .HasColumnType("int");

                    b.Property<int>("SubscriptionId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("FeatureId");

                    b.HasIndex("SubscriptionId");

                    b.ToTable("SubscriptionFeature", "Subscription");
                });

            modelBuilder.Entity("Domain.Entities.Subscription.UserSubscription", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("BuyCount")
                        .HasColumnType("int");

                    b.Property<DateTime>("EndDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("SubscriptionId")
                        .HasColumnType("int");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("SubscriptionId");

                    b.HasIndex("UserId");

                    b.ToTable("UserSubscription", "Subscription");
                });

            modelBuilder.Entity("Domain.Entities.Tag.Tag", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("IconHtmlCode")
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.Property<string>("IconPicture")
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(350)
                        .HasColumnType("nvarchar(350)");

                    b.Property<bool>("Status")
                        .HasColumnType("bit");

                    b.Property<int>("Type")
                        .HasColumnType("int");

                    b.Property<string>("UniqueName")
                        .IsRequired()
                        .HasMaxLength(300)
                        .HasColumnType("nvarchar(300)");

                    b.HasKey("Id");

                    b.ToTable("Tag", "Tag");
                });

            modelBuilder.Entity("Domain.Entities.Team.Team", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Avatar")
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.Property<string>("Degree")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("Description")
                        .HasMaxLength(800)
                        .HasColumnType("nvarchar(800)");

                    b.Property<string>("FullName")
                        .IsRequired()
                        .HasMaxLength(350)
                        .HasColumnType("nvarchar(350)");

                    b.Property<string>("HoverPic")
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.Property<string>("Instagram")
                        .HasColumnType("nvarchar(max)");

                    b.Property<byte>("Sort")
                        .HasColumnType("tinyint");

                    b.Property<string>("Telegram")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Twitter")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("WhatsApp")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Team", "Shared");
                });

            modelBuilder.Entity("Domain.Entities.UploadedFile.UploadedFile", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Extension")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("FileType")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(350)
                        .HasColumnType("nvarchar(350)");

                    b.HasKey("Id");

                    b.ToTable("UploadedFile", "Shared");
                });

            modelBuilder.Entity("Domain.Entities.User.ApplicationUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("Address")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("Avatar")
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.Property<DateTime?>("BirthDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("BlockedDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("CityBaseId")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("ConfirmationDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .HasMaxLength(512)
                        .IsUnicode(false)
                        .HasColumnType("varchar(512)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<int>("ExpireTimeSpanBlock")
                        .HasColumnType("int");

                    b.Property<string>("Firstname")
                        .HasMaxLength(350)
                        .HasColumnType("nvarchar(350)");

                    b.Property<int>("Gender")
                        .HasColumnType("int");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<DateTime>("LastDeleteBicycleDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("LastUpdateDateReason")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Lastname")
                        .HasMaxLength(350)
                        .HasColumnType("nvarchar(350)");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("LockoutReason")
                        .HasMaxLength(800)
                        .HasColumnType("nvarchar(800)");

                    b.Property<string>("NationalCode")
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(512)
                        .IsUnicode(false)
                        .HasColumnType("varchar(512)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(512)
                        .IsUnicode(false)
                        .HasColumnType("varchar(512)");

                    b.Property<string>("OneTimeUseCode")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<DateTime?>("OneTimeUseCodeEnd")
                        .HasColumnType("datetime2");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Phone")
                        .HasMaxLength(11)
                        .HasColumnType("nvarchar(11)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<DateTime>("RegisterDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("StateBaseId")
                        .HasColumnType("int");

                    b.Property<int?>("StateId")
                        .HasColumnType("int");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTime>("UpdateDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("UserIsBlocked")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(512)
                        .IsUnicode(false)
                        .HasColumnType("varchar(512)");

                    b.Property<int>("UserNameType")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CityBaseId");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.HasIndex("StateBaseId");

                    b.HasIndex("StateId");

                    b.ToTable("ApplicationUser", "User");

                    b.HasData(
                        new
                        {
                            Id = "05446344-f9cc-4566-bd2c-36791b4e28ed",
                            AccessFailedCount = 0,
                            BlockedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ConcurrencyStamp = "0eace3dd-45a1-47c0-a5c8-12fbbce2cccb",
                            Email = "admin@localhost.com",
                            EmailConfirmed = true,
                            ExpireTimeSpanBlock = 0,
                            Firstname = "Admin",
                            Gender = 0,
                            IsDeleted = false,
                            LastDeleteBicycleDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Lastname = "System",
                            LockoutEnabled = false,
                            NormalizedEmail = "ADMIN@LOCALHOST.COM",
                            NormalizedUserName = "ADMIN@LOCALHOST.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEEcI+8Cg0MiG0m1thIwwBbH9RjZxOPCZrF7e+s1QtFgK9yHSP3W/T26w/mGH1BTHHQ==",
                            PhoneNumberConfirmed = false,
                            RegisterDate = new DateTime(2025, 4, 28, 9, 57, 53, 154, DateTimeKind.Local).AddTicks(6043),
                            SecurityStamp = "dce27e4d-8d9b-4e32-8068-04bd5a7dcc8b",
                            TwoFactorEnabled = false,
                            UpdateDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            UserIsBlocked = false,
                            UserName = "admin@localhost.com",
                            UserNameType = 0
                        },
                        new
                        {
                            Id = "2ec9f480-7288-4d0f-a1cd-53cc89968b45",
                            AccessFailedCount = 0,
                            BlockedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ConcurrencyStamp = "dc514388-75dc-422d-bb24-53d1cd4e1ab9",
                            Email = "user@localhost.com",
                            EmailConfirmed = true,
                            ExpireTimeSpanBlock = 0,
                            Firstname = "System",
                            Gender = 0,
                            IsDeleted = false,
                            LastDeleteBicycleDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Lastname = "User",
                            LockoutEnabled = false,
                            NormalizedEmail = "USER@LOCALHOST.COM",
                            NormalizedUserName = "USER@LOCALHOST.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAENhPtHCDRvsJYWCfvyNOfR6Pb5sw13Z2UHf7naz9zUdwqOHFFJPofrXkp+O3z6IwbA==",
                            PhoneNumberConfirmed = false,
                            RegisterDate = new DateTime(2025, 4, 28, 9, 57, 53, 202, DateTimeKind.Local).AddTicks(7164),
                            SecurityStamp = "05809709-a83c-4b34-8e2b-4d2051e5f53e",
                            TwoFactorEnabled = false,
                            UpdateDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            UserIsBlocked = false,
                            UserName = "user@localhost.com",
                            UserNameType = 0
                        });
                });

            modelBuilder.Entity("Domain.Entities.User.UserAddress", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("CityBaseId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<bool?>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("LastDeleteBicycleDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("LastDeletePermanentDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("LastUpdateDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasMaxLength(11)
                        .HasColumnType("nvarchar(11)");

                    b.Property<string>("PostalAddress")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PostalCode")
                        .IsRequired()
                        .HasMaxLength(15)
                        .HasColumnType("nvarchar(15)");

                    b.Property<string>("ReceiverName")
                        .IsRequired()
                        .HasMaxLength(350)
                        .HasColumnType("nvarchar(350)");

                    b.Property<int>("StateBaseId")
                        .HasColumnType("int");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("CityBaseId");

                    b.HasIndex("StateBaseId");

                    b.HasIndex("UserId");

                    b.ToTable("UserAddresses", "User");
                });

            modelBuilder.Entity("Domain.Entities.User.UserBannerClick", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("BannerId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("BannerId");

                    b.HasIndex("UserId");

                    b.ToTable("UserBannerClick", "User");
                });

            modelBuilder.Entity("Domain.Entities.User.UserBannerView", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("BannerId")
                        .HasColumnType("int");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("BannerId");

                    b.HasIndex("UserId");

                    b.ToTable("UserBannerView", "User");
                });

            modelBuilder.Entity("Domain.Entities.User.UserBlogLike", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("BlogId")
                        .HasColumnType("int");

                    b.Property<DateTime>("LikeTimeDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("BlogId");

                    b.HasIndex("UserId");

                    b.ToTable("UserBlogLike", "User");
                });

            modelBuilder.Entity("Domain.Entities.User.UserBookMark", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("BlogId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<bool?>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("JobBranchId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime?>("LastDeleteBicycleDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("LastDeletePermanentDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("LastUpdateDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("UserBookMarkType")
                        .HasColumnType("int");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("UserIp")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("JobBranchId");

                    b.HasIndex("UserId");

                    b.ToTable("UserBookMark", "User");
                });

            modelBuilder.Entity("Domain.Entities.User.UserTokens", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasDefaultValueSql("NEWSEQUENTIALID()");

                    b.Property<string>("Device")
                        .IsRequired()
                        .HasMaxLength(350)
                        .HasColumnType("nvarchar(350)");

                    b.Property<string>("HashJwtToken")
                        .IsRequired()
                        .HasMaxLength(800)
                        .HasColumnType("nvarchar(800)");

                    b.Property<string>("HashRefreshToken")
                        .IsRequired()
                        .HasMaxLength(800)
                        .HasColumnType("nvarchar(800)");

                    b.Property<DateTime>("RefreshTokenExpireDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("TokenExpireDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("UsersToken", "User");
                });

            modelBuilder.Entity("Domain.Entities.User.UsersFeedbackSlider", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("JobBranchId")
                        .IsRequired()
                        .HasMaxLength(450)
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("JobId")
                        .HasColumnType("int");

                    b.Property<string>("Picture")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<byte>("Sort")
                        .HasColumnType("tinyint");

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("UserRole")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("JobBranchId");

                    b.ToTable("UsersFeedbackSlider", "dbo");
                });

            modelBuilder.Entity("Domain.Entities.Wallets.Transaction", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasDefaultValueSql("NEWSEQUENTIALID()");

                    b.Property<string>("AuthCode")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("PaymentId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("RefId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<string>("TrackingCode")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime>("TransactionDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("PaymentId");

                    b.ToTable("Transaction", "Wallet");
                });

            modelBuilder.Entity("Domain.Entities.Wallets.Wallet", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasDefaultValueSql("NEWSEQUENTIALID()");

                    b.Property<string>("ApplicationUserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<double>("Inventory")
                        .HasColumnType("float");

                    b.HasKey("Id");

                    b.HasIndex("ApplicationUserId")
                        .IsUnique();

                    b.ToTable("Wallet", "Wallet");
                });

            modelBuilder.Entity("Domain.Entities.Wallets.WalletTransaction", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasDefaultValueSql("NEWSEQUENTIALID()");

                    b.Property<double>("Amount")
                        .HasColumnType("float");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsConfirmed")
                        .HasColumnType("bit");

                    b.Property<Guid>("TransactionId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("TransactionType")
                        .HasColumnType("int");

                    b.Property<Guid>("WalletId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("TransactionId");

                    b.HasIndex("WalletId");

                    b.ToTable("WalletTransaction", "Wallet");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", "dbo");

                    b.HasData(
                        new
                        {
                            Id = "9845f909-799c-45fd-9158-58c1336ffddc",
                            Name = "User",
                            NormalizedName = "USER"
                        },
                        new
                        {
                            Id = "cb275765-1cac-4652-a03f-f8871dd575d1",
                            Name = "Administrator",
                            NormalizedName = "ADMINISTRATOR"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", "dbo");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", "dbo");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", "dbo");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", "dbo");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", "dbo");
                });

            modelBuilder.Entity("Domain.Entities.Address.Address", b =>
                {
                    b.HasOne("Domain.Entities.City.CityBase", "City")
                        .WithMany("Addresses")
                        .HasForeignKey("CityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Entities.Job.JobBranch", "JobBranch")
                        .WithOne("Address")
                        .HasForeignKey("Domain.Entities.Address.Address", "JobBranchId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Domain.Entities.Location.Location", "Location")
                        .WithOne("Address")
                        .HasForeignKey("Domain.Entities.Address.Address", "LocationId");

                    b.HasOne("Domain.Entities.State.StateBase", "State")
                        .WithMany("Addresses")
                        .HasForeignKey("StateId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("City");

                    b.Navigation("JobBranch");

                    b.Navigation("Location");

                    b.Navigation("State");
                });

            modelBuilder.Entity("Domain.Entities.Banner.Banner", b =>
                {
                    b.HasOne("Domain.Entities.Job.JobBranch", "JobBranch")
                        .WithMany("Banners")
                        .HasForeignKey("JobBranchId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("JobBranch");
                });

            modelBuilder.Entity("Domain.Entities.Blog.BlogCategoryRel", b =>
                {
                    b.HasOne("Domain.Entities.Blog.BlogCategory", "BlogCategory")
                        .WithMany("BlogCategoryRels")
                        .HasForeignKey("BlogCategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Entities.Blog.Blog", "Blog")
                        .WithMany("BlogCategoryRels")
                        .HasForeignKey("BlogId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Blog");

                    b.Navigation("BlogCategory");
                });

            modelBuilder.Entity("Domain.Entities.Blog.BlogTag", b =>
                {
                    b.HasOne("Domain.Entities.Blog.Blog", "Blog")
                        .WithMany("BlogTags")
                        .HasForeignKey("BlogId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Entities.Tag.Tag", "Tag")
                        .WithMany("BlogTags")
                        .HasForeignKey("TagId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Blog");

                    b.Navigation("Tag");
                });

            modelBuilder.Entity("Domain.Entities.Category.CategoryService", b =>
                {
                    b.HasOne("Domain.Entities.Category.Category", "Category")
                        .WithMany("CategoryServices")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Entities.Service.Service", "Service")
                        .WithMany("CategoryServices")
                        .HasForeignKey("ServiceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Category");

                    b.Navigation("Service");
                });

            modelBuilder.Entity("Domain.Entities.Category.CategoryTag", b =>
                {
                    b.HasOne("Domain.Entities.Category.Category", "Category")
                        .WithMany("CategoryTags")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Entities.Tag.Tag", "Tag")
                        .WithMany("CategoryTags")
                        .HasForeignKey("TagId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Category");

                    b.Navigation("Tag");
                });

            modelBuilder.Entity("Domain.Entities.City.City", b =>
                {
                    b.HasOne("Domain.Entities.City.CityBase", "CityBase")
                        .WithOne("City")
                        .HasForeignKey("Domain.Entities.City.City", "CityBaseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CityBase");
                });

            modelBuilder.Entity("Domain.Entities.City.CityBase", b =>
                {
                    b.HasOne("Domain.Entities.State.StateBase", "StateBase")
                        .WithOne("CityBase")
                        .HasForeignKey("Domain.Entities.City.CityBase", "StateBaseId");

                    b.Navigation("StateBase");
                });

            modelBuilder.Entity("Domain.Entities.City.CityCategory", b =>
                {
                    b.HasOne("Domain.Entities.Category.Category", "Category")
                        .WithMany("CityCategories")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Entities.City.City", "City")
                        .WithMany("CityCategories")
                        .HasForeignKey("CityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Category");

                    b.Navigation("City");
                });

            modelBuilder.Entity("Domain.Entities.Comment.AnswerComment", b =>
                {
                    b.HasOne("Domain.Entities.Comment.Comment", "Comment")
                        .WithMany("AnswerComments")
                        .HasForeignKey("CommentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Comment");
                });

            modelBuilder.Entity("Domain.Entities.Comment.Comment", b =>
                {
                    b.HasOne("Domain.Entities.Blog.Blog", "Blog")
                        .WithMany("BlogComments")
                        .HasForeignKey("BlogId");

                    b.HasOne("Domain.Entities.Job.JobBranch", "JobBranch")
                        .WithMany("Comments")
                        .HasForeignKey("JobBranchId");

                    b.HasOne("Domain.Entities.User.ApplicationUser", "ApplicationUser")
                        .WithMany("Comments")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ApplicationUser");

                    b.Navigation("Blog");

                    b.Navigation("JobBranch");
                });

            modelBuilder.Entity("Domain.Entities.Faq.Faq", b =>
                {
                    b.HasOne("Domain.Entities.Faq.FaqCategory", "FaqCategory")
                        .WithMany("Faqs")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("FaqCategory");
                });

            modelBuilder.Entity("Domain.Entities.Faq.FaqJobCategory", b =>
                {
                    b.HasOne("Domain.Entities.Faq.Faq", "Faq")
                        .WithMany("FaqJobCategories")
                        .HasForeignKey("FaqId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Entities.Category.Category", "Category")
                        .WithMany("FaqJobCategories")
                        .HasForeignKey("JobCategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Category");

                    b.Navigation("Faq");
                });

            modelBuilder.Entity("Domain.Entities.Job.Job", b =>
                {
                    b.HasOne("Domain.Entities.Brand.Brand", "Brand")
                        .WithMany("Jobs")
                        .HasForeignKey("JobBrandId");

                    b.Navigation("Brand");
                });

            modelBuilder.Entity("Domain.Entities.Job.JobBranch", b =>
                {
                    b.HasOne("Domain.Entities.Job.Job", "Job")
                        .WithMany("JobBranches")
                        .HasForeignKey("JobId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Domain.Entities.User.ApplicationUser", "ApplicationUser")
                        .WithMany("JobBranches")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("ApplicationUser");

                    b.Navigation("Job");
                });

            modelBuilder.Entity("Domain.Entities.Job.JobBranchGallery", b =>
                {
                    b.HasOne("Domain.Entities.Job.JobBranch", "JobBranch")
                        .WithMany("JobBranchGalleries")
                        .HasForeignKey("JobBranchId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("JobBranch");
                });

            modelBuilder.Entity("Domain.Entities.Job.JobBranchShortLink", b =>
                {
                    b.HasOne("Domain.Entities.Job.JobBranch", "JobBranch")
                        .WithMany("JobBranchShortLinks")
                        .HasForeignKey("JobBranchId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("JobBranch");
                });

            modelBuilder.Entity("Domain.Entities.Job.JobBranchTag", b =>
                {
                    b.HasOne("Domain.Entities.Job.JobBranch", "JobBranch")
                        .WithMany("JobBranchTags")
                        .HasForeignKey("JobBranchId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Entities.Tag.Tag", "Tag")
                        .WithMany("JobBranchTags")
                        .HasForeignKey("TagId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("JobBranch");

                    b.Navigation("Tag");
                });

            modelBuilder.Entity("Domain.Entities.Job.JobCategory", b =>
                {
                    b.HasOne("Domain.Entities.Category.Category", "Category")
                        .WithMany("JobCategories")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Entities.Job.Job", "Job")
                        .WithMany("JobCategories")
                        .HasForeignKey("JobId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Category");

                    b.Navigation("Job");
                });

            modelBuilder.Entity("Domain.Entities.Job.JobInfo", b =>
                {
                    b.HasOne("Domain.Entities.Job.Job", "Job")
                        .WithOne("JobInfo")
                        .HasForeignKey("Domain.Entities.Job.JobInfo", "JobId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Job");
                });

            modelBuilder.Entity("Domain.Entities.Job.JobKeyword", b =>
                {
                    b.HasOne("Domain.Entities.Job.JobBranch", "JobBranch")
                        .WithMany("JobKeywords")
                        .HasForeignKey("JobBranchId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Entities.Job.Keyword", "Keyword")
                        .WithMany("JobKeywords")
                        .HasForeignKey("KeywordId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("JobBranch");

                    b.Navigation("Keyword");
                });

            modelBuilder.Entity("Domain.Entities.Job.JobRanking", b =>
                {
                    b.HasOne("Domain.Entities.Job.Job", "Job")
                        .WithOne("JobRanking")
                        .HasForeignKey("Domain.Entities.Job.JobRanking", "JobId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Job");
                });

            modelBuilder.Entity("Domain.Entities.Job.JobSelectionSlider", b =>
                {
                    b.HasOne("Domain.Entities.Job.JobBranch", "JobBranch")
                        .WithMany("JobSelectionSliders")
                        .HasForeignKey("JobBranchId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("JobBranch");
                });

            modelBuilder.Entity("Domain.Entities.Job.JobService", b =>
                {
                    b.HasOne("Domain.Entities.Job.JobBranch", "JobBranch")
                        .WithMany("JobServices")
                        .HasForeignKey("JobBranchId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Entities.Service.Service", "Service")
                        .WithMany("JobServices")
                        .HasForeignKey("ServiceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("JobBranch");

                    b.Navigation("Service");
                });

            modelBuilder.Entity("Domain.Entities.Job.JobTag", b =>
                {
                    b.HasOne("Domain.Entities.Job.Job", "Job")
                        .WithMany("JobTags")
                        .HasForeignKey("JobId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Entities.Tag.Tag", "Tag")
                        .WithMany("JobTags")
                        .HasForeignKey("TagId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Job");

                    b.Navigation("Tag");
                });

            modelBuilder.Entity("Domain.Entities.Job.JobTimeWork", b =>
                {
                    b.HasOne("Domain.Entities.DayOfWeek.DayOfWeek", "DayOfWeek")
                        .WithMany("JobTimeWorks")
                        .HasForeignKey("DayOfWeekId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Entities.Job.JobBranch", "JobBranch")
                        .WithMany("JobTimeWorks")
                        .HasForeignKey("JobBranchId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("DayOfWeek");

                    b.Navigation("JobBranch");
                });

            modelBuilder.Entity("Domain.Entities.Job.Keyword", b =>
                {
                    b.HasOne("Domain.Entities.Category.Category", "Category")
                        .WithMany("Keywords")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Category");
                });

            modelBuilder.Entity("Domain.Entities.MainSlider.MainSlider", b =>
                {
                    b.HasOne("Domain.Entities.City.CityBase", "City")
                        .WithMany("MainSliders")
                        .HasForeignKey("CityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Entities.Job.JobBranch", "JobBranch")
                        .WithMany("MainSliders")
                        .HasForeignKey("JobBranchId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Entities.State.StateBase", "State")
                        .WithMany("MainSliders")
                        .HasForeignKey("StateId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("City");

                    b.Navigation("JobBranch");

                    b.Navigation("State");
                });

            modelBuilder.Entity("Domain.Entities.MessageBox.MessageBox", b =>
                {
                    b.HasOne("Domain.Entities.Job.Job", "Job")
                        .WithMany("MessageBoxes")
                        .HasForeignKey("JobId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Job");
                });

            modelBuilder.Entity("Domain.Entities.Payment.Payment", b =>
                {
                    b.HasOne("Domain.Entities.Payment.PaymentPortal", "PaymentPortal")
                        .WithMany("Payments")
                        .HasForeignKey("PaymentPortalId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Entities.Payment.PromotionCode", "PromotionCode")
                        .WithMany("Payments")
                        .HasForeignKey("PromotionCodeId");

                    b.HasOne("Domain.Entities.Subscription.UserSubscription", "UserSubscription")
                        .WithMany("Payments")
                        .HasForeignKey("UserSubscriptionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("PaymentPortal");

                    b.Navigation("PromotionCode");

                    b.Navigation("UserSubscription");
                });

            modelBuilder.Entity("Domain.Entities.State.State", b =>
                {
                    b.HasOne("Domain.Entities.State.StateBase", "StateBase")
                        .WithOne("State")
                        .HasForeignKey("Domain.Entities.State.State", "StateBaseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("StateBase");
                });

            modelBuilder.Entity("Domain.Entities.Subscription.SubscriptionClick", b =>
                {
                    b.HasOne("Domain.Entities.Subscription.Click", "Click")
                        .WithMany("SubscriptionClicks")
                        .HasForeignKey("ClickId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Entities.Subscription.Subscription", "Subscription")
                        .WithMany("SubscriptionClicks")
                        .HasForeignKey("SubscriptionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Click");

                    b.Navigation("Subscription");
                });

            modelBuilder.Entity("Domain.Entities.Subscription.SubscriptionFeature", b =>
                {
                    b.HasOne("Domain.Entities.Subscription.Feature", "Feature")
                        .WithMany("SubscriptionFeatures")
                        .HasForeignKey("FeatureId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Entities.Subscription.Subscription", "Subscription")
                        .WithMany("SubscriptionFeatures")
                        .HasForeignKey("SubscriptionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Feature");

                    b.Navigation("Subscription");
                });

            modelBuilder.Entity("Domain.Entities.Subscription.UserSubscription", b =>
                {
                    b.HasOne("Domain.Entities.Subscription.Subscription", "Subscription")
                        .WithMany("UserSubscriptions")
                        .HasForeignKey("SubscriptionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Entities.User.ApplicationUser", "User")
                        .WithMany("UserSubscriptions")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Subscription");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Domain.Entities.User.ApplicationUser", b =>
                {
                    b.HasOne("Domain.Entities.City.CityBase", "CityBase")
                        .WithMany("ApplicationUsers")
                        .HasForeignKey("CityBaseId");

                    b.HasOne("Domain.Entities.State.StateBase", "StateBase")
                        .WithMany("ApplicationUsers")
                        .HasForeignKey("StateBaseId");

                    b.HasOne("Domain.Entities.State.State", null)
                        .WithMany("ApplicationUsers")
                        .HasForeignKey("StateId");

                    b.Navigation("CityBase");

                    b.Navigation("StateBase");
                });

            modelBuilder.Entity("Domain.Entities.User.UserAddress", b =>
                {
                    b.HasOne("Domain.Entities.City.CityBase", "CityBase")
                        .WithMany("UserAddresses")
                        .HasForeignKey("CityBaseId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Domain.Entities.State.StateBase", "StateBase")
                        .WithMany("UserAddresses")
                        .HasForeignKey("StateBaseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Entities.User.ApplicationUser", "ApplicationUser")
                        .WithMany("UserAddresses")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("ApplicationUser");

                    b.Navigation("CityBase");

                    b.Navigation("StateBase");
                });

            modelBuilder.Entity("Domain.Entities.User.UserBannerClick", b =>
                {
                    b.HasOne("Domain.Entities.Banner.Banner", "Banner")
                        .WithMany("UserBannerClicks")
                        .HasForeignKey("BannerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Entities.User.ApplicationUser", "ApplicationUser")
                        .WithMany("UserBannerClicks")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ApplicationUser");

                    b.Navigation("Banner");
                });

            modelBuilder.Entity("Domain.Entities.User.UserBannerView", b =>
                {
                    b.HasOne("Domain.Entities.Banner.Banner", "Banner")
                        .WithMany("UserBannerViews")
                        .HasForeignKey("BannerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Entities.User.ApplicationUser", "ApplicationUser")
                        .WithMany("UserBannerViews")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ApplicationUser");

                    b.Navigation("Banner");
                });

            modelBuilder.Entity("Domain.Entities.User.UserBlogLike", b =>
                {
                    b.HasOne("Domain.Entities.Blog.Blog", "Blog")
                        .WithMany("BlogUserLikes")
                        .HasForeignKey("BlogId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Entities.User.ApplicationUser", "ApplicationUser")
                        .WithMany("UserBlogLikes")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ApplicationUser");

                    b.Navigation("Blog");
                });

            modelBuilder.Entity("Domain.Entities.User.UserBookMark", b =>
                {
                    b.HasOne("Domain.Entities.Job.JobBranch", null)
                        .WithMany("JobUserBookMarks")
                        .HasForeignKey("JobBranchId");

                    b.HasOne("Domain.Entities.User.ApplicationUser", "ApplicationUser")
                        .WithMany("UserBookMarks")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ApplicationUser");
                });

            modelBuilder.Entity("Domain.Entities.User.UsersFeedbackSlider", b =>
                {
                    b.HasOne("Domain.Entities.Job.JobBranch", "JobBranch")
                        .WithMany("UsersFeedbackSliders")
                        .HasForeignKey("JobBranchId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("JobBranch");
                });

            modelBuilder.Entity("Domain.Entities.Wallets.Transaction", b =>
                {
                    b.HasOne("Domain.Entities.Payment.Payment", "Payment")
                        .WithMany("Transactions")
                        .HasForeignKey("PaymentId");

                    b.Navigation("Payment");
                });

            modelBuilder.Entity("Domain.Entities.Wallets.Wallet", b =>
                {
                    b.HasOne("Domain.Entities.User.ApplicationUser", "ApplicationUser")
                        .WithOne("Wallet")
                        .HasForeignKey("Domain.Entities.Wallets.Wallet", "ApplicationUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ApplicationUser");
                });

            modelBuilder.Entity("Domain.Entities.Wallets.WalletTransaction", b =>
                {
                    b.HasOne("Domain.Entities.Wallets.Transaction", "Transaction")
                        .WithMany("WalletTransactions")
                        .HasForeignKey("TransactionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Entities.Wallets.Wallet", "Wallet")
                        .WithMany("WalletTransactions")
                        .HasForeignKey("WalletId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Transaction");

                    b.Navigation("Wallet");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Domain.Entities.User.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Domain.Entities.User.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Entities.User.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Domain.Entities.User.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Domain.Entities.Banner.Banner", b =>
                {
                    b.Navigation("UserBannerClicks");

                    b.Navigation("UserBannerViews");
                });

            modelBuilder.Entity("Domain.Entities.Blog.Blog", b =>
                {
                    b.Navigation("BlogCategoryRels");

                    b.Navigation("BlogComments");

                    b.Navigation("BlogTags");

                    b.Navigation("BlogUserLikes");
                });

            modelBuilder.Entity("Domain.Entities.Blog.BlogCategory", b =>
                {
                    b.Navigation("BlogCategoryRels");
                });

            modelBuilder.Entity("Domain.Entities.Brand.Brand", b =>
                {
                    b.Navigation("Jobs");
                });

            modelBuilder.Entity("Domain.Entities.Category.Category", b =>
                {
                    b.Navigation("CategoryServices");

                    b.Navigation("CategoryTags");

                    b.Navigation("CityCategories");

                    b.Navigation("FaqJobCategories");

                    b.Navigation("JobCategories");

                    b.Navigation("Keywords");
                });

            modelBuilder.Entity("Domain.Entities.City.City", b =>
                {
                    b.Navigation("CityCategories");
                });

            modelBuilder.Entity("Domain.Entities.City.CityBase", b =>
                {
                    b.Navigation("Addresses");

                    b.Navigation("ApplicationUsers");

                    b.Navigation("City")
                        .IsRequired();

                    b.Navigation("MainSliders");

                    b.Navigation("UserAddresses");
                });

            modelBuilder.Entity("Domain.Entities.Comment.Comment", b =>
                {
                    b.Navigation("AnswerComments");
                });

            modelBuilder.Entity("Domain.Entities.DayOfWeek.DayOfWeek", b =>
                {
                    b.Navigation("JobTimeWorks");
                });

            modelBuilder.Entity("Domain.Entities.Faq.Faq", b =>
                {
                    b.Navigation("FaqJobCategories");
                });

            modelBuilder.Entity("Domain.Entities.Faq.FaqCategory", b =>
                {
                    b.Navigation("Faqs");
                });

            modelBuilder.Entity("Domain.Entities.Job.Job", b =>
                {
                    b.Navigation("JobBranches");

                    b.Navigation("JobCategories");

                    b.Navigation("JobInfo")
                        .IsRequired();

                    b.Navigation("JobRanking")
                        .IsRequired();

                    b.Navigation("JobTags");

                    b.Navigation("MessageBoxes");
                });

            modelBuilder.Entity("Domain.Entities.Job.JobBranch", b =>
                {
                    b.Navigation("Address")
                        .IsRequired();

                    b.Navigation("Banners");

                    b.Navigation("Comments");

                    b.Navigation("JobBranchGalleries");

                    b.Navigation("JobBranchShortLinks");

                    b.Navigation("JobBranchTags");

                    b.Navigation("JobKeywords");

                    b.Navigation("JobSelectionSliders");

                    b.Navigation("JobServices");

                    b.Navigation("JobTimeWorks");

                    b.Navigation("JobUserBookMarks");

                    b.Navigation("MainSliders");

                    b.Navigation("UsersFeedbackSliders");
                });

            modelBuilder.Entity("Domain.Entities.Job.Keyword", b =>
                {
                    b.Navigation("JobKeywords");
                });

            modelBuilder.Entity("Domain.Entities.Location.Location", b =>
                {
                    b.Navigation("Address");
                });

            modelBuilder.Entity("Domain.Entities.Payment.Payment", b =>
                {
                    b.Navigation("Transactions");
                });

            modelBuilder.Entity("Domain.Entities.Payment.PaymentPortal", b =>
                {
                    b.Navigation("Payments");
                });

            modelBuilder.Entity("Domain.Entities.Payment.PromotionCode", b =>
                {
                    b.Navigation("Payments");
                });

            modelBuilder.Entity("Domain.Entities.Service.Service", b =>
                {
                    b.Navigation("CategoryServices");

                    b.Navigation("JobServices");
                });

            modelBuilder.Entity("Domain.Entities.State.State", b =>
                {
                    b.Navigation("ApplicationUsers");
                });

            modelBuilder.Entity("Domain.Entities.State.StateBase", b =>
                {
                    b.Navigation("Addresses");

                    b.Navigation("ApplicationUsers");

                    b.Navigation("CityBase")
                        .IsRequired();

                    b.Navigation("MainSliders");

                    b.Navigation("State")
                        .IsRequired();

                    b.Navigation("UserAddresses");
                });

            modelBuilder.Entity("Domain.Entities.Subscription.Click", b =>
                {
                    b.Navigation("SubscriptionClicks");
                });

            modelBuilder.Entity("Domain.Entities.Subscription.Feature", b =>
                {
                    b.Navigation("SubscriptionFeatures");
                });

            modelBuilder.Entity("Domain.Entities.Subscription.Subscription", b =>
                {
                    b.Navigation("SubscriptionClicks");

                    b.Navigation("SubscriptionFeatures");

                    b.Navigation("UserSubscriptions");
                });

            modelBuilder.Entity("Domain.Entities.Subscription.UserSubscription", b =>
                {
                    b.Navigation("Payments");
                });

            modelBuilder.Entity("Domain.Entities.Tag.Tag", b =>
                {
                    b.Navigation("BlogTags");

                    b.Navigation("CategoryTags");

                    b.Navigation("JobBranchTags");

                    b.Navigation("JobTags");
                });

            modelBuilder.Entity("Domain.Entities.User.ApplicationUser", b =>
                {
                    b.Navigation("Comments");

                    b.Navigation("JobBranches");

                    b.Navigation("UserAddresses");

                    b.Navigation("UserBannerClicks");

                    b.Navigation("UserBannerViews");

                    b.Navigation("UserBlogLikes");

                    b.Navigation("UserBookMarks");

                    b.Navigation("UserSubscriptions");

                    b.Navigation("Wallet")
                        .IsRequired();
                });

            modelBuilder.Entity("Domain.Entities.Wallets.Transaction", b =>
                {
                    b.Navigation("WalletTransactions");
                });

            modelBuilder.Entity("Domain.Entities.Wallets.Wallet", b =>
                {
                    b.Navigation("WalletTransactions");
                });
#pragma warning restore 612, 618
        }
    }
}
