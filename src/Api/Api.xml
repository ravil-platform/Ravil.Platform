<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Api</name>
    </assembly>
    <members>
        <member name="T:Api.Controllers.V1.ActionHistoriesController">
            <inheritdoc />
        </member>
        <member name="M:Api.Controllers.V1.ActionHistoriesController.#ctor(MediatR.IMediator,Logging.Base.ILogger{Api.Controllers.V1.ActionHistoriesController},AutoMapper.IMapper)">
            <summary>
            ActionHistoriesController Constructor
            </summary>
            <param name="mediator"></param>
            <param name="logger"></param>
            <param name="mapper"></param>
        </member>
        <member name="M:Api.Controllers.V1.ActionHistoriesController.Create(Application.Features.ActionHistories.Create.CreateActionHistoriesCommand)">
            <summary>
            Creates an Action History
            </summary>
            <param name="command"></param>
            <returns></returns>
        </member>
        <member name="T:Api.Controllers.V1.BannersController">
            <summary>
            BannersController
            </summary>
            <param name="mediator"></param>
            <param name="logger"></param>
            <param name="mapper"></param>
        </member>
        <member name="M:Api.Controllers.V1.BannersController.#ctor(MediatR.IMediator,Logging.Base.ILogger{Api.Controllers.V1.BannersController},AutoMapper.IMapper)">
            <summary>
            BannersController
            </summary>
            <param name="mediator"></param>
            <param name="logger"></param>
            <param name="mapper"></param>
        </member>
        <member name="M:Api.Controllers.V1.BannersController.GetAll(Application.Features.Banner.GetAll.GetAllBannersQuery)">
            <summary>
            Returns all banners
            </summary>
            <param name="query"></param>
            <returns></returns>
        </member>
        <member name="M:Api.Controllers.V1.BannersController.GetAllByBranchId(Application.Features.Banner.GetAllByBranchId.GetAllBannersByBranchIdQuery)">
            <summary>
            Returns all banners by given jobBranch id
            </summary>
            <param name="query"></param>
            <returns></returns>
        </member>
        <member name="M:Api.Controllers.V1.BannersController.GetAllByType(Application.Features.Banner.GetAllByType.GetAllBannersByTypeQuery)">
            <summary>
            Returns all banners by given type
            </summary>
            <param name="query"></param>
            <returns></returns>
        </member>
        <member name="T:Api.Controllers.V1.BlogsController">
            <summary>
            
            </summary>
            <param name="mediator"></param>
            <param name="logger"></param>
            <param name="mapper"></param>
        </member>
        <member name="M:Api.Controllers.V1.BlogsController.#ctor(MediatR.IMediator,Logging.Base.ILogger{Api.Controllers.V1.BlogsController},AutoMapper.IMapper)">
            <summary>
            
            </summary>
            <param name="mediator"></param>
            <param name="logger"></param>
            <param name="mapper"></param>
        </member>
        <member name="M:Api.Controllers.V1.BlogsController.GetAll(Application.Features.Blog.Queries.GetAll.GetAllBlogsQuery)">
            <summary>
            Returns all blogs (using for seo)
            </summary>
            <param name="query"></param>
            <returns></returns>
        </member>
        <member name="M:Api.Controllers.V1.BlogsController.GetAllByFilter(Application.Features.Blog.Queries.GetAllByFilter.GetAllBlogsByFilterQuery)">
            <summary>
            Returns all blogs by given filter
            </summary>
            <param name="query"></param>
            <returns></returns>
        </member>
        <member name="M:Api.Controllers.V1.BlogsController.GetByRoute(Application.Features.Blog.Queries.GetByRoute.GetBlogByRouteQuery)">
            <summary>
            Returns a blog by given route
            </summary>
            <param name="query"></param>
            <returns></returns>
        </member>
        <member name="M:Api.Controllers.V1.BlogsController.GetById(Application.Features.Blog.Queries.GetById.GetBlogByIdQuery)">
            <summary>
            Returns a blog by given Id
            </summary>
            <param name="query"></param>
            <returns></returns>
        </member>
        <member name="M:Api.Controllers.V1.BlogsController.GetBlogCategories(Application.Features.Blog.Queries.GetBlogCategories.GetBlogCategoriesQuery)">
            <summary>
            Returns all blog categories 
            </summary>
            <param name="query"></param>
            <returns></returns>
        </member>
        <member name="M:Api.Controllers.V1.BlogsController.GetBlogCategoriesByParentId(Application.Features.Blog.Queries.GetBlogCategoriesByParentId.GetBlogCategoriesByParentIdQuery)">
            <summary>
            Returns all blog categories by given parent id
            </summary>
            <param name="query"></param>
            <returns></returns>
        </member>
        <member name="M:Api.Controllers.V1.BrandsController.GetAll(Application.Features.Brand.Queries.GetAll.GetAllBrandsQuery)">
            <summary>
            Returns all brands
            </summary>
            <param name="query"></param>
            <returns></returns>
        </member>
        <member name="T:Api.Controllers.V1.CategoriesController">
            <inheritdoc />
        </member>
        <member name="M:Api.Controllers.V1.CategoriesController.#ctor(MediatR.IMediator,Logging.Base.ILogger{Api.Controllers.V1.CategoriesController},AutoMapper.IMapper)">
            <summary>
            Categories Controller
            </summary>
            <param name="mediator"></param>
            <param name="logger"></param>
            <param name="mapper"></param>
        </member>
        <member name="M:Api.Controllers.V1.CategoriesController.GetAll(Application.Features.Category.Queries.GetAll.GetAllCategoriesQuery)">
            <summary>
            Returns all categories
            </summary>
            <param name="query"></param>
            <returns></returns>
        </member>
        <member name="M:Api.Controllers.V1.CategoriesController.GetAllByParentId(Application.Features.Category.Queries.GetAllByParentId.GetAllCategoriesByParentIdQuery)">
            <summary>
            Returns all categories by parent id
            </summary>
            <param name="query"></param>
            <returns></returns>
        </member>
        <member name="M:Api.Controllers.V1.CategoriesController.GetAllByFilter(Application.Features.Category.Queries.GetAllByFilter.GetAllCategoriesByFilterQuery)">
            <summary>
            Returns all categories by given filter
            </summary>
            <param name="query"></param>
            <returns></returns>
        </member>
        <member name="M:Api.Controllers.V1.CategoriesController.GetByRoute(Application.Features.Category.Queries.GetByRoute.GetCategoryByRouteQuery)">
            <summary>
            Returns a category by given route
            </summary>
            <param name="query"></param>
            <returns></returns>
        </member>
        <member name="M:Api.Controllers.V1.CategoriesController.GetCategoryServices(Application.Features.Category.Queries.GetAllCategoryService.GetAllCategoryServiceQuery)">
            <summary>
            Returns all category services
            </summary>
            <param name="query"></param>
            <returns></returns>
        </member>
        <member name="M:Api.Controllers.V1.CategoriesController.GetMainCategories(Application.Features.Category.Queries.GetMainCategories.GetMainCategoriesQuery)">
            <summary>
            Returns all main categories 
            </summary>
            <param name="query"></param>
            <returns></returns>
        </member>
        <member name="M:Api.Controllers.V1.CategoriesController.GetChildCategories(Application.Features.Category.Queries.GetChildCategories.GetChildCategoryQuery)">
            <summary>
            Returns all child categories 
            </summary>
            <param name="query"></param>
            <returns></returns>
        </member>
        <member name="M:Api.Controllers.V1.CategoriesController.GetRelatedRegions(Application.Features.Category.Queries.GetRelatedRegion.GetRelatedRegionQuery)">
            <summary>
            Returns all related regions by given current cityId
            </summary>
            <param name="query"></param>
            <returns></returns>
        </member>
        <member name="T:Api.Controllers.V1.CitiesController">
            <inheritdoc />
        </member>
        <member name="M:Api.Controllers.V1.CitiesController.#ctor(MediatR.IMediator,Logging.Base.ILogger{Api.Controllers.V1.CitiesController},AutoMapper.IMapper)">
            <summary>
            Cities Controller
            </summary>
            <param name="mediator"></param>
            <param name="logger"></param>
        </member>
        <member name="M:Api.Controllers.V1.CitiesController.GetAll(Application.Features.City.Queries.GetAll.GetAllCitiesQuery)">
            <summary>
            Returns all cities
            </summary>
            <param name="query"></param>
            <returns></returns>
        </member>
        <member name="M:Api.Controllers.V1.CitiesController.GetAllByCityBaseId(Application.Features.City.Queries.GetAllByCityBaseId.GetAllCitiesByCityBaseIdQuery)">
            <summary>
            Returns all cities by given city base id
            </summary>
            <param name="query"></param>
            <returns></returns>
        </member>
        <member name="M:Api.Controllers.V1.CitiesController.GetAllCityBase(Application.Features.City.Queries.GetAllCityBase.GetAllCityBaseQuery)">
            <summary>
            Returns all cityBases
            </summary>
            <param name="query"></param>
            <returns></returns>
        </member>
        <member name="M:Api.Controllers.V1.CitiesController.GetAllCityCategory(Application.Features.City.Queries.GetAllCityCategory.GetAllCityCategoryQuery)">
            <summary>
            Returns all cityCategories
            </summary>
            <param name="query"></param>
            <returns></returns>
        </member>
        <member name="M:Api.Controllers.V1.CitiesController.GetCityBaseByLocation(Application.Features.City.Queries.GetCityBaseByLocation.GetCityBaseByLocationQuery)">
            <summary>
            Return CityBase Data From Location Data (Latitude, Longitude)
            </summary>
            <param name="query"></param>
            <returns></returns>
        </member>
        <member name="T:Api.Controllers.V1.CommentsController">
            <inheritdoc />
        </member>
        <member name="M:Api.Controllers.V1.CommentsController.#ctor(MediatR.IMediator,Logging.Base.ILogger{Api.Controllers.V1.CommentsController},AutoMapper.IMapper)">
            <inheritdoc />
        </member>
        <member name="M:Api.Controllers.V1.CommentsController.GetAllCommentsByFilter(Application.Features.Comment.Queries.GetAll.GetCommentsByFilterQuery)">
            <summary>
            Returns all comments by given filter
            </summary>
            <param name="query"></param>
            <returns></returns>
        </member>
        <member name="M:Api.Controllers.V1.CommentsController.GetAllAnswersByFilter(Application.Features.Comment.Queries.GetAllAnswersByCommentId.GetAnswersByCommentIdQuery)">
            <summary>
            Returns all replies to a comment with the given comment id
            </summary>
            <param name="query"></param>
            <returns></returns>
        </member>
        <member name="M:Api.Controllers.V1.CommentsController.Create(Application.Features.Comment.Commands.Create.CreateCommentCommand)">
            <summary>
            Creates a comment
            </summary>
            <param name="command"></param>
            <returns></returns>
        </member>
        <member name="M:Api.Controllers.V1.CommentsController.CreateAnswerComment(Application.Features.Comment.Commands.CreateAnswer.CreateAnswerCommentCommand)">
            <summary>
            Creates a reply to a comment
            </summary>
            <param name="command"></param>
            <returns></returns>
        </member>
        <member name="M:Api.Controllers.V1.ConfigsController.Get(Application.Features.Config.Queries.Get.GetConfigQuery)">
            <summary>
            Returns all configs
            </summary>
            <param name="query"></param>
            <returns></returns>
        </member>
        <member name="M:Api.Controllers.V1.DayOfWeeksController.GetAll(Application.Features.DayOfWeek.Queries.GetAll.GetAllDayOfWeekQuery)">
            <summary>
            Returns all day of weeks
            </summary>
            <param name="query"></param>
            <returns></returns>
        </member>
        <member name="T:Api.Controllers.V1.FaqsController">
            <inheritdoc />
        </member>
        <member name="M:Api.Controllers.V1.FaqsController.#ctor(MediatR.IMediator,Logging.Base.ILogger{Api.Controllers.V1.FaqsController},AutoMapper.IMapper)">
            <inheritdoc />
        </member>
        <member name="M:Api.Controllers.V1.FaqsController.GetAll(Application.Features.Faq.Queries.GetAll.GetAllFaqsQuery)">
            <summary>
            Returns all faqs
            </summary>
            <param name="query"></param>
            <returns></returns>
        </member>
        <member name="M:Api.Controllers.V1.FaqsController.GetAllByCategoryId(Application.Features.Faq.Queries.GetAllByCategoryId.GetAllFaqsByCategoryIdQuery)">
            <summary>
            Returns all faqs by given category id
            </summary>
            <param name="query"></param>
            <returns></returns>
        </member>
        <member name="M:Api.Controllers.V1.FaqsController.GetAllFaqCategories(Application.Features.Faq.Queries.GetAllFaqCategories.GetAllFaqCategoriesQuery)">
            <summary>
            Returns all faq categories
            </summary>
            <param name="query"></param>
            <returns></returns>
        </member>
        <member name="M:Api.Controllers.V1.FeedbackSlidersController.GetAllByFilter(Application.Features.FeedbackSlider.Queries.GetAllByFilter.GetAllFeedbackSliderByFilterQuery)">
            <summary>
            Returns feed back sliders by given filter
            </summary>
            <param name="query"></param>
            <returns></returns>
        </member>
        <member name="T:Api.Controllers.V1.JobsController">
            <inheritdoc />
        </member>
        <member name="M:Api.Controllers.V1.JobsController.#ctor(MediatR.IMediator,Logging.Base.ILogger{Api.Controllers.V1.JobsController},AutoMapper.IMapper)">
            <inheritdoc />
        </member>
        <member name="M:Api.Controllers.V1.JobsController.GetAll(Application.Features.Job.Queries.GetAll.GetAllJobsQuery)">
            <summary>
            Returns all job branches 
            </summary>
            <param name="query"></param>
            <returns></returns>
        </member>
        <member name="M:Api.Controllers.V1.JobsController.GetAdvertisingJobs(Application.Features.Job.Queries.GetJobBranchAds.GetAdvertisingJobsQuery)">
            <summary>
            Returns all advertising job branches 
            </summary>
            <param name="query"></param>
            <returns></returns>
        </member>
        <member name="M:Api.Controllers.V1.JobsController.GetRelatedJobBranches(Application.Features.Job.Queries.GetRelatedJobBranches.GetRelatedJobBranchesQuery)">
            <summary>
            Returns job branches with a given categoryId and cityId and take entities
            </summary>
            <param name="query"></param>
            <returns></returns>
        </member>
        <member name="M:Api.Controllers.V1.JobsController.GetJobBranchesByFilter(Application.Features.Job.Queries.GetAllJobBranch.GetAllJobBranchByFilterQuery)">
            <summary>
            Returns all job branches by given filter
            </summary>
            <param name="query"></param>
            <returns></returns>
        </member>
        <member name="M:Api.Controllers.V1.JobsController.GetJobBranchesByJobId(Application.Features.Job.Queries.GetAllJobBranchByJobId.GetAllJobBranchByJobIdQuery)">
            <summary>
            Returns all job branches by given job id
            </summary>
            <param name="query"></param>
            <returns></returns>
        </member>
        <member name="M:Api.Controllers.V1.JobsController.GetJobBranchById(Application.Features.Job.Queries.GetJobBranchById.GetJobBranchByIdQuery)">
            <summary>
            Returns job branch by unique id
            </summary>
            <param name="query"></param>
            <returns></returns>
        </member>
        <member name="M:Api.Controllers.V1.JobsController.GetJobBranchByRoute(Application.Features.Job.Queries.GetJobBranchByRoute.GetJobBranchByRouteQuery)">
            <summary>
            Returns job branch by unique route
            </summary>
            <param name="query"></param>
            <returns></returns>
        </member>
        <member name="M:Api.Controllers.V1.JobsController.GetJobServices(Application.Features.Job.Queries.GetAllJobService.GetAllJobServiceQuery)">
            <summary>
            Returns all job services 
            </summary>
            <param name="query"></param>
            <returns></returns>
        </member>
        <member name="M:Api.Controllers.V1.JobsController.GetNewestJobs(Application.Features.Job.Queries.GetNewestJobs.GetNewestJobsQuery)">
            <summary>
            Returns newest jobs
            </summary>
            <param name="query"></param>
            <returns></returns>
        </member>
        <member name="M:Api.Controllers.V1.JobsController.GetBestJobs(Application.Features.Job.Queries.GetBestJobs.GetBestJobsQuery)">
            <summary>
            Returns best jobs
            </summary>
            <param name="query"></param>
            <returns></returns>
        </member>
        <member name="M:Api.Controllers.V1.JobsController.GetRelatedJobs(Application.Features.Job.Queries.GetRelatedJobs.GetRelatedJobsQuery)">
            <summary>
            Returns Related jobs
            </summary>
            <param name="query"></param>
            <returns></returns>
        </member>
        <member name="M:Api.Controllers.V1.JobsController.GetByRoute(Application.Features.Job.Queries.GetByRoute.GetJobByRouteQuery)">
            <summary>
            Returns a job by given route
            </summary>
            <param name="query"></param>
            <returns></returns>
        </member>
        <member name="M:Api.Controllers.V1.JobsController.GetJobsByCategoryId(Application.Features.Job.Queries.GetAllByCategoryId.GetAllJobsByCategoryIdQuery)">
            <summary>
            Returns all jobs by given category id
            </summary>
            <param name="query"></param>
            <returns></returns>
        </member>
        <member name="M:Api.Controllers.V1.JobsController.GetJobSelectionSliderByFilter(Application.Features.Job.Queries.GetJobSelectionSlider.GetJobSelectionSliderQuery)">
            <summary>
            Returns all job selection slider by given filter
            </summary>
            <param name="query"></param>
            <returns></returns>
        </member>
        <member name="M:Api.Controllers.V1.JobsController.GetJobBranchShortLinksByJobBranchId(Application.Features.Job.Queries.GetJobBranchShortLinks.GetJobBranchShortLinksQuery)">
            <summary>
            Returns all job branch short links by given job branch id 
            </summary>
            <param name="query"></param>
            <returns></returns>
        </member>
        <member name="M:Api.Controllers.V1.JobsController.GetJobBranchGalleriesByJobBranchId(Application.Features.Job.Queries.GetJobBranchGalleries.GetJobBranchGalleriesQuery)">
            <summary>
            Returns all job branch galleries by given job branch id 
            </summary>
            <param name="query"></param>
            <returns></returns>
        </member>
        <member name="M:Api.Controllers.V1.JobsController.GetJobTimeWorkByJobBranchId(Application.Features.Job.Queries.GetJobTimeWork.GetJobTimeWorksQuery)">
            <summary>
            Returns all job time works by given job branch id
            </summary>
            <param name="query"></param>
            <returns></returns>
        </member>
        <member name="M:Api.Controllers.V1.JobsController.CreateJob(Application.Features.Job.Commands.Create.CreateJobCommand)">
            <summary>
            Creates a job
            </summary>
            <param name="command"></param>
            <returns></returns>
        </member>
        <member name="M:Api.Controllers.V1.JobsController.CreateJobCategory(Application.Features.Job.Commands.CreateJobCategory.CreateJobCategoryCommand)">
            <summary>
            Creates a job category
            </summary>
            <param name="command"></param>
            <returns></returns>
        </member>
        <member name="M:Api.Controllers.V1.JobsController.CreateJobBranch(Application.Features.Job.Commands.CreateJobBranch.CreateJobBranchCommand)">
            <summary>
            Creates a job branch
            </summary>
            <param name="command"></param>
            <returns></returns>
        </member>
        <member name="M:Api.Controllers.V1.JobsController.CreateFreeJobBranch(Application.Features.Job.Commands.CreateFreeJobBranch.CreateFreeJobBranchCommand)">
            <summary>
            Creates a job and also job branch ( add free job in ravil ) 
            </summary>
            <param name="command"></param>
            <returns></returns>
        </member>
        <member name="M:Api.Controllers.V1.JobsController.UploadJobBranchVideo(Application.Features.Job.Commands.UploadJobBranchVideo.UploadJobBranchVideoCommand)">
            <summary>
            Upload job branch video
            </summary>
            <param name="command"></param>
            <returns></returns>
        </member>
        <member name="M:Api.Controllers.V1.JobsController.UploadJobBranchGalleries(Application.Features.Job.Commands.UploadJobBranchGalleries.UploadJobBranchGalleriesCommand)">
            <summary>
            Upload job branch galleries
            </summary>
            <param name="command"></param>
            <returns></returns>
        </member>
        <member name="M:Api.Controllers.V1.JobsController.RemoveJobBranchGallery(Application.Features.Job.Commands.RemoveJobBranchGalleries.RemoveJobBranchGalleriesCommand)">
            <summary>
            Upload job branch galleries
            </summary>
            <param name="command"></param>
            <returns></returns>
        </member>
        <member name="M:Api.Controllers.V1.JobsController.UploadJobBranchImage(Application.Features.Job.Commands.UploadJobBranchImage.UploadJobBranchImageCommand)">
            <summary>
            Upload job branch image
            </summary>
            <param name="command"></param>
            <returns></returns>
        </member>
        <member name="M:Api.Controllers.V1.JobsController.UpdateJobBranch(Application.Features.Job.Commands.UpdateJobBranch.UpdateJobBranchCommand)">
            <summary>
            Update a job branch 
            </summary>
            <param name="command"></param>
            <returns></returns>
        </member>
        <member name="M:Api.Controllers.V1.JobsController.UpdateJobBranchLocation(Application.Features.Job.Commands.UpdateJobBranchLocation.UpdateJobBranchLocationCommand)">
            <summary>
            Update a job branch location
            </summary>
            <param name="command"></param>
            <returns></returns>
        </member>
        <member name="M:Api.Controllers.V1.JobsController.UpdateJob(Application.Features.Job.Commands.Update.UpdateJobCommand)">
            <summary>
            Update a job 
            </summary>
            <param name="command"></param>
            <returns></returns>
        </member>
        <member name="M:Api.Controllers.V1.JobsController.UpdateJobCategory(Application.Features.Job.Commands.UpdateJobCategory.UpdateJobCategoryCommand)">
            <summary>
            Update a job category
            </summary>
            <param name="command"></param>
            <returns></returns>
        </member>
        <member name="M:Api.Controllers.V1.MainSlidersController.GetAllByFilter(Application.Features.MainSlider.Queries.GetAllByFilter.GetAllMainSlidersByFilterQuery)">
            <summary>
            Returns all main sliders 
            </summary>
            <param name="query"></param>
            <returns></returns>
        </member>
        <member name="M:Api.Controllers.V1.SearchController.SearchByCategoryAndJob(Application.Features.Search.Queries.SearchByCategoryAndJobQuery)">
            <summary>
            Returns search result
            </summary>
            <param name="query"></param>
            <returns></returns>
        </member>
        <member name="M:Api.Controllers.V1.ServicesController.GetAll(Application.Features.Service.Queries.GetAll.GetAllServicesQuery)">
            <summary>
            Returns all services 
            </summary>
            <param name="query"></param>
            <returns></returns>
        </member>
        <member name="M:Api.Controllers.V1.ServicesController.GetJobServices(Application.Features.Job.Queries.GetAllJobService.GetAllJobServiceQuery)">
            <summary>
            Returns all job services
            </summary>
            <param name="query"></param>
            <returns></returns>
        </member>
        <member name="M:Api.Controllers.V1.ServicesController.GetCategoryServices(Application.Features.Category.Queries.GetAllCategoryService.GetAllCategoryServiceQuery)">
            <summary>
            Returns all category services 
            </summary>
            <param name="query"></param>
            <returns></returns>
        </member>
        <member name="M:Api.Controllers.V1.ShortLinksController.GetAll(Application.Features.ShortLink.Queries.GetAll.GetAllShortLinkQuery)">
            <summary>
            Returns all short links
            </summary>
            <param name="query"></param>
            <returns></returns>
        </member>
        <member name="M:Api.Controllers.V1.ShortLinksController.GetAllByItemId(Application.Features.ShortLink.Queries.GetAllByItemId.GetAllShortLinkByItemIdQuery)">
            <summary>
            Returns all short link by item id
            </summary>
            <param name="query"></param>
            <returns></returns>
        </member>
        <member name="M:Api.Controllers.V1.StatesController.GetAll(Application.Features.State.Queries.GetAll.GetAllStatesQuery)">
            <summary>
            Returns all state bases
            </summary>
            <param name="query"></param>
            <returns></returns>
        </member>
        <member name="M:Api.Controllers.V1.StatesController.GetAllByStateBaseId(Application.Features.State.Queries.GetAllByStateBaseId.GetAllStatesByStateBaseIdQuery)">
            <summary>
            Returns all states by iven state base id
            </summary>
            <param name="query"></param>
            <returns></returns>
        </member>
        <member name="M:Api.Controllers.V1.StatesController.GetAllStateBases(Application.Features.State.Queries.GetAllStateBase.GetAllStateBaseQuery)">
            <summary>
            Returns all state bases
            </summary>
            <param name="query"></param>
            <returns></returns>
        </member>
        <member name="M:Api.Controllers.V1.TagsController.GetAll(Application.Features.Tag.Queries.GetAll.GetAllTagsQuery)">
            <summary>
            Returns all tags
            </summary>
            <param name="query"></param>
            <returns></returns>
        </member>
        <member name="M:Api.Controllers.V1.TagsController.GetAllByType(Application.Features.Tag.Queries.GetAllByType.GetAllTagsByTypeQuery)">
            <summary>
            Returns all tags by given type
            </summary>
            <param name="query"></param>
            <returns></returns>
        </member>
        <member name="M:Api.Controllers.V1.TagsController.GetBlogTagsByBlogId(Application.Features.Blog.Queries.GetTags.GetBlogTagsByIdQuery)">
            <summary>
            Returns blog tags by given blog id
            </summary>
            <param name="query"></param>
            <returns></returns>
        </member>
        <member name="M:Api.Controllers.V1.TagsController.GetJobTagsByJobId(Application.Features.Job.Queries.GetTags.GetJobTagsByIdQuery)">
            <summary>
            Returns job tags by given job id
            </summary>
            <param name="query"></param>
            <returns></returns>
        </member>
        <member name="M:Api.Controllers.V1.TagsController.GetJobBranchTagsByJobBranchId(Application.Features.Job.Queries.GetJobBranchTags.GetJobBranchTagsByIdQuery)">
            <summary>
            Returns job branch tags by job branch id
            </summary>
            <param name="query"></param>
            <returns></returns>
        </member>
        <member name="M:Api.Controllers.V1.TagsController.GetTagsByCategoryId(Application.Features.Tag.Queries.GetTagsByCategoryId.GetTagsByCategoryIdQuery)">
            <summary>
            Returns all tags for specific category by given categoryId
            </summary>
            <param name="query"></param>
            <returns></returns>
        </member>
        <member name="T:Api.Controllers.V1.TeamsController">
            <inheritdoc />
        </member>
        <member name="M:Api.Controllers.V1.TeamsController.#ctor(MediatR.IMediator,Logging.Base.ILogger{Api.Controllers.V1.TeamsController},AutoMapper.IMapper)">
            <inheritdoc />
        </member>
        <member name="M:Api.Controllers.V1.TeamsController.GetAll(Application.Features.Team.Queries.GetAll.GetAllTeamsQuery)">
            <summary>
            Returns all teams
            </summary>
            <param name="query"></param>
            <returns></returns>
        </member>
        <member name="T:Api.Controllers.V1.UserProfileController">
            <inheritdoc />
        </member>
        <member name="M:Api.Controllers.V1.UserProfileController.#ctor(MediatR.IMediator,Logging.Base.ILogger{Api.Controllers.V1.UserProfileController},AutoMapper.IMapper)">
            <inheritdoc />
        </member>
        <member name="M:Api.Controllers.V1.UserProfileController.GetUserJobBranches(Application.Features.User.Queries.GetUserJobBranches.GetUserJobBranchesQuery)">
            <summary>
            Returns user job branches for given user id
            </summary>
            <param name="query"></param>
            <returns></returns>
        </member>
        <member name="M:Api.Controllers.V1.UserProfileController.CheckIsBlogLiked(Application.Features.User.Queries.CheckIsBlogLiked.CheckIsBlogLikedQuery)">
            <summary>
            Returns Check user blog like for given user id
            </summary>
            <param name="query"></param>
            <returns></returns>
        </member>
        <member name="M:Api.Controllers.V1.UserProfileController.CheckIsJobBookMarked(Application.Features.User.Queries.CheckIsJobBookMarked.CheckIsJobBookMarkedQuery)">
            <summary>
            Returns Check user job bookmark for given user id
            </summary>
            <param name="query"></param>
            <returns></returns>
        </member>
        <member name="M:Api.Controllers.V1.UserProfileController.GetJobBookMarks(Application.Features.User.Queries.GetJobBookMarks.GetJobBookMarksQuery)">
            <summary>
            Returns Get All user job bookmarks for given user id
            </summary>
            <param name="query"></param>
            <returns></returns>
        </member>
        <member name="M:Api.Controllers.V1.UserProfileController.AddBlogLike(Application.Features.User.Commands.AddBlogLike.AddBlogLikeCommand)">
            <summary>
            Add blog like with given blog id and user id
            </summary>
            <param name="command"></param>
            <returns></returns>
        </member>
        <member name="M:Api.Controllers.V1.UserProfileController.AddToBookMark(Application.Features.User.Commands.AddToBookMark.AddToBookMarkCommand)">
            <summary>
            Add blog or branch to bookmark for given user id
            </summary>
            <param name="command"></param>
            <returns></returns>
        </member>
        <member name="M:Api.Controllers.V1.UserProfileController.RemoveBookMark(Application.Features.User.Commands.RemoveBookMark.RemoveBookMarkCommand)">
            <summary>
            Remove a bookmark from unique id
            </summary>
            <param name="command"></param>
            <returns></returns>
        </member>
        <member name="M:Api.Controllers.V1.UserProfileController.UploadUserAvatar(Application.Features.User.Commands.UploadUserAvatar.UploadUserAvatarCommand)">
            <summary>
            Upload user avatar for given user id
            </summary>
            <param name="command"></param>
            <returns></returns>
        </member>
        <member name="M:Api.Controllers.V1.UserProfileController.UpdateUserInfo(Application.Features.User.Commands.UpdateInfo.UpdateUserInfoCommand)">
            <summary>
            Updates user info for given user id
            </summary>
            <param name="command"></param>
            <returns></returns>
        </member>
        <member name="M:Api.Controllers.V1.UserProfileController.Logout(Application.Features.User.Commands.RemoveToken.RemoveUserTokenCommand)">
            <summary>
            Remove user token by given jwt token
            </summary>
            <param name="command"></param>
            <returns></returns>
        </member>
        <member name="T:Api.Controllers.V1.UsersController">
            <inheritdoc />
        </member>
        <member name="M:Api.Controllers.V1.UsersController.#ctor(MediatR.IMediator,Logging.Base.ILogger{Api.Controllers.V1.UsersController},AutoMapper.IMapper)">
            <inheritdoc />
        </member>
        <member name="M:Api.Controllers.V1.UsersController.GetById(Application.Features.User.Queries.GetById.GetUserByIdQuery)">
            <summary>
            Returns a user by unique id
            </summary>
            <param name="command"></param>
            <returns></returns>
        </member>
        <member name="M:Api.Controllers.V1.UsersController.Create(Application.Features.User.Commands.Create.CreateUserCommand)">
            <summary>
            Using this action for create a user and test the system if you want (test)
            </summary>
            <param name="command"></param>
            <returns></returns>
        </member>
        <member name="M:Api.Controllers.V1.UsersController.RegisterOrLogin(Application.Features.User.Commands.RegisterOrLogin.RegisterOrLoginUserCommand)">
            <summary>
            This action used for login or register user and gives you a JWT token and refresh token . (send sms code as null for register)
            </summary>
            <param name="command"></param>
            <returns></returns>
        </member>
        <member name="M:Api.Controllers.V1.UsersController.SendSmsCode(Application.Features.User.Commands.RegisterOrLogin.RegisterOrLoginUserCommand)">
            <summary>
            Send sms code again for register or login user for given phone number (do not fill sms code)
            </summary>
            <param name="command"></param>
            <returns></returns>
        </member>
        <member name="M:Api.Controllers.V1.UsersController.GenerateToken(Application.Features.User.Commands.GenerateToken.GenerateTokenCommand)">
            <summary>
            Generate JWT token for given user
            </summary>
            <param name="command"></param>
            <returns></returns>
        </member>
        <member name="M:Api.Controllers.V1.UsersController.RefreshToken(Application.Features.User.Commands.RefreshToken.RefreshTokenCommand)">
            <summary>
            Find user token by given refresh token id and gives you a new token
            </summary>
            <param name="command"></param>
            <returns></returns>
        </member>
        <member name="T:Api.Controllers.V2.AnalyticsController">
            <inheritdoc />
        </member>
        <member name="M:Api.Controllers.V2.AnalyticsController.#ctor(MediatR.IMediator,Logging.Base.ILogger{Api.Controllers.V2.AnalyticsController},AutoMapper.IMapper)">
            <inheritdoc />
        </member>
        <member name="M:Api.Controllers.V2.AnalyticsController.OverView(Application.Features.Job.Queries.GetJobOverView.JobOverViewQuery)">
            <summary>
            Returns job overview by given jobId
            </summary>
            <param name="query"></param>
            <returns></returns>
        </member>
        <member name="M:Api.Controllers.V2.AnalyticsController.GetViews(Application.Features.Job.Queries.GetJobViews.GetJobViewsQuery)">
            <summary>
            Returns job views by given jobId
            </summary>
            <param name="query"></param>
            <returns></returns>
        </member>
        <member name="M:Api.Controllers.V2.AnalyticsController.GetReviewsSummery(Application.Features.Job.Queries.GetReviewsSummery.GetReviewsSummeryQuery)">
            <summary>
            Returns review summery by given jobId
            </summary>
            <param name="query"></param>
            <returns></returns>
        </member>
        <member name="M:Api.Controllers.V2.AnalyticsController.GetTagsPotential(Application.Features.Job.Queries.GetTagsPotential.GetTagsPotentialQuery)">
            <summary>
            Returns tags potential by given jobId
            </summary>
            <param name="query"></param>
            <returns></returns>
        </member>
        <member name="M:Api.Controllers.V2.AnalyticsController.GetContactRequests(Application.Features.Job.Queries.GetContactRequests.GetContactRequestsQuery)">
            <summary>
            Returns Contact Requests (phone, map, social media) by given jobId
            </summary>
            <param name="query"></param>
            <returns></returns>
        </member>
        <member name="M:Api.Controllers.V2.AnalyticsController.GetJobStatisticsByFilter(Application.Features.Job.Queries.GetJobStatisticsByFilter.GetJobStatisticsByFilterQuery)">
            <summary>
            Returns job statistics by given filter
            </summary>
            <param name="query"></param>
            <returns></returns>
        </member>
        <member name="M:Api.Controllers.V2.AnalyticsController.GetJobRankingsByFilter(Application.Features.Job.Queries.GetJobRankingsByFilter.GetJobRankingsByFilterQuery)">
            <summary>
            Returns all job rankings by given filter
            </summary>
            <param name="query"></param>
            <returns></returns>
        </member>
        <member name="M:Api.Controllers.V2.AnalyticsController.AddJobRanking(Application.Features.Job.Commands.AddJobRanking.AddJobRankingCommand)">
            <summary>
            Add Job Ranking History command
            </summary>
            <param name="command"></param>
            <returns></returns>
        </member>
        <member name="T:Api.Controllers.V2.GuideLinesController">
            <inheritdoc />
        </member>
        <member name="M:Api.Controllers.V2.GuideLinesController.#ctor(MediatR.IMediator,Logging.Base.ILogger{Api.Controllers.V2.GuideLinesController},AutoMapper.IMapper)">
            <inheritdoc />
        </member>
        <member name="M:Api.Controllers.V2.GuideLinesController.Get(Application.Features.GuideLine.Queries.GetGuideLines.GetGuideLinesQuery)">
            <summary>
            Returns all Guide Lines Status
            </summary>
            <param name="query"></param>
            <returns></returns>
        </member>
        <member name="M:Api.Controllers.V2.GuideLinesController.GuideLineCompletion(Application.Features.GuideLine.Commands.GuideLineCompletion.GuideLineCompletionCommand)">
            <summary>
            Update Guide Line Status action
            </summary>
            <param name="command"></param>
            <returns></returns>
        </member>
        <member name="T:Api.Controllers.V2.JobsController">
            <inheritdoc />
        </member>
        <member name="M:Api.Controllers.V2.JobsController.#ctor(MediatR.IMediator,Logging.Base.ILogger{Api.Controllers.V2.JobsController},AutoMapper.IMapper)">
            <inheritdoc />
        </member>
        <member name="M:Api.Controllers.V2.JobsController.GetJobBranchByUserId(Application.Features.Job.Queries.GetJobBranchByUserId.GetJobBranchByUserIdQuery)">
            <summary>
            Returns job branch by user id
            </summary>
            <param name="query"></param>
            <returns></returns>
        </member>
        <member name="M:Api.Controllers.V2.JobsController.Report(Application.Features.Job.Queries.Report.JobReportQuery)">
            <summary>
            Returns report job clicks information
            </summary>
            <param name="query"></param>
            <returns></returns>
        </member>
        <member name="M:Api.Controllers.V2.JobsController.GetAllKeywords(Application.Features.Job.Queries.GetAllKeywords.GetAllKeywordsQuery)">
            <summary>
            Returns all keywords tag list
            </summary>
            <param name="query"></param>
            <returns></returns>
        </member>
        <member name="M:Api.Controllers.V2.JobsController.CreateFreeJobBranch(Application.Features.Job.Commands.CreateFreeJobBranch.CreateFreeJobBranchCommand)">
            <summary>
            Creates a job and also job branch ( add free job in ravil ) 
            </summary>
            <param name="command"></param>
            <returns></returns>
        </member>
        <member name="M:Api.Controllers.V2.JobsController.UpdateBusiness(Application.Features.Job.Commands.UpdateBusiness.UpdateBusinessCommand)">
            <summary>
            Update a Business (job) 
            </summary>
            <param name="command"></param>
            <returns></returns>
        </member>
        <member name="M:Api.Controllers.V2.JobsController.RemoveJobBranchGallery(Application.Features.Job.Commands.RemoveJobBranchGalleries.RemoveJobBranchGalleriesCommand)">
            <summary>
            Upload job branch galleries
            </summary>
            <param name="command"></param>
            <returns></returns>
        </member>
        <member name="M:Api.Controllers.V2.JobsController.AdsClickActivity(Application.Features.Job.Commands.AdsClickActivity.AdsClickActivityCommand)">
            <summary>
            Ads Click action command
            </summary>
            <param name="command"></param>
            <returns></returns>
        </member>
        <member name="M:Api.Controllers.V2.JobsController.SetAdsClickSetting(Application.Features.Job.Commands.SetAdsClickSetting.SetAdsClickSettingCommand)">
            <summary>
            Set Ads Click settings for each user command
            </summary>
            <param name="command"></param>
            <returns></returns>
        </member>
        <member name="M:Api.Controllers.V2.JobsController.RechargeAdsClick(Application.Features.Job.Commands.RechargeAdsClick.RechargeAdsClickCommand)">
            <summary>
            Recharge Ads Click account command
            </summary>
            <param name="command"></param>
            <returns></returns>
        </member>
        <member name="M:Api.Controllers.V2.JobsController.RechargeAdsClickVerification(Application.Features.Job.Commands.RechargeAdsClickVerification.RechargeAdsClickVerificationCommand)">
            <summary>
            Verify Recharge Ads Click command
            </summary>
            <param name="command"></param>
            <returns></returns>
        </member>
        <member name="T:Api.Controllers.V2.MessageBoxController">
            <inheritdoc />
        </member>
        <member name="M:Api.Controllers.V2.MessageBoxController.#ctor(MediatR.IMediator,Logging.Base.ILogger{Api.Controllers.V2.MessageBoxController},AutoMapper.IMapper)">
            <inheritdoc />
        </member>
        <member name="M:Api.Controllers.V2.MessageBoxController.GetAllMessageBoxByFilter(Application.Features.MessageBox.Queries.GetAllMessageBoxByFilter.GetAllMessageBoxByFilterQuery)">
            <summary>
            Returns all messages box by given filter
            </summary>
            <param name="query"></param>
            <returns></returns>
        </member>
        <member name="M:Api.Controllers.V2.MessageBoxController.ReadAllMessages(Application.Features.MessageBox.Commands.ReadAllMessages.ReadAllMessagesCommand)">
            <summary>
            Read All Messages command
            </summary>
            <param name="command"></param>
            <returns></returns>
        </member>
        <member name="T:Api.Controllers.V2.PanelTutorialsController">
            <inheritdoc />
        </member>
        <member name="M:Api.Controllers.V2.PanelTutorialsController.#ctor(MediatR.IMediator,Logging.Base.ILogger{Api.Controllers.V2.PanelTutorialsController},AutoMapper.IMapper)">
            <inheritdoc />
        </member>
        <member name="M:Api.Controllers.V2.PanelTutorialsController.Get(Application.Features.PanelTutorial.Queries.Get.GetPanelTutorialsQuery)">
            <summary>
            Returns all Panel Tutorials Status
            </summary>
            <param name="query"></param>
            <returns></returns>
        </member>
        <member name="T:Api.Controllers.V2.PaymentsController">
            <inheritdoc />
        </member>
        <member name="M:Api.Controllers.V2.PaymentsController.#ctor(MediatR.IMediator,Logging.Base.ILogger{Api.Controllers.V2.PaymentsController},AutoMapper.IMapper)">
            <inheritdoc />
        </member>
        <member name="M:Api.Controllers.V2.PaymentsController.Payment(Application.Features.Payments.Commands.Payment.PaymentCommand)">
            <summary>
            Payment Action Command
            </summary>
            <param name="command"></param>
            <typeparam name="'PaymentCommand''PaymentCommand'">The type returned from this method</typeparam>
            <returns>FluentResults.Result</returns>
        </member>
        <member name="M:Api.Controllers.V2.PaymentsController.Verification(Application.Features.Payments.Commands.PaymentVerification.PaymentVerificationCommand)">
            <summary>
            Payment Verification Action Command
            </summary>
            <param name="command"></param>
            <typeparam name="'PaymentVerificationCommand''PaymentVerificationCommand'">The type returned from this method</typeparam>
            <returns>FluentResults.Result</returns>
        </member>
        <member name="M:Api.Controllers.V2.PaymentsController.GetPortals(Application.Features.Payments.Queries.GetPaymentPortals.GetPaymentPortalsQuery)">
            <summary>
            Get Payment Portals
            </summary>
            <param name="query"></param>
            <returns>FluentResults.Result</returns>
        </member>
        <member name="T:Api.Controllers.V2.SubscriptionController">
            <inheritdoc />
        </member>
        <member name="M:Api.Controllers.V2.SubscriptionController.#ctor(MediatR.IMediator,Logging.Base.ILogger{Api.Controllers.V2.SubscriptionController},AutoMapper.IMapper)">
            <inheritdoc />
        </member>
        <member name="M:Api.Controllers.V2.SubscriptionController.GetAll(Application.Features.Subscription.Queries.GetAll.GetAllSubscriptionPlanQuery)">
            <summary>
            Returns all subscription plans
            </summary>
            <param name="query"></param>
            <returns></returns>
        </member>
        <member name="M:Api.Controllers.V2.SubscriptionController.GetByUserId(Application.Features.Subscription.Queries.GetByUserId.GetUserSubscriptionPlanQuery)">
            <summary>
            Return user(business owner) subscription plan
            </summary>
            <param name="query"></param>
            <returns></returns>
        </member>
    </members>
</doc>
